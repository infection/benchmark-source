<?php

declare(strict_types=1);

namespace Infection\BenchmarkCodeGenerator\Test\Console\Command\GenerateCommand;

use Infection\BenchmarkCodeGenerator\Console\Command\GenerateCommand;
use Infection\BenchmarkCodeGenerator\FileGenerator\GeneratorRegistry;
use PHPUnit\Framework\Attributes\CoversClass;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Tester\CommandTester;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Filesystem\Path;
use Symfony\Component\Finder\Finder;
use Symfony\Component\Finder\SplFileInfo;
use function iterator_to_array;

#[CoversClass(GenerateCommand::class)]
final class GenerateCommandTest extends TestCase
{
    private const TEST_PROJECT_DIR = __DIR__.'/../../../var/GenerateCommandTest';

    private Filesystem $filesystem;
    private CommandTester $commandTester;

    protected function setUp(): void
    {
        $this->filesystem = new Filesystem();

        $this->filesystem->remove(self::TEST_PROJECT_DIR);
        $this->filesystem->mkdir(self::TEST_PROJECT_DIR);

        $command = new GenerateCommand(
            filesystem: $this->filesystem,
            generatorRegistry: new GeneratorRegistry(
                new DummyServiceGenerator(),
            ),
        );

        $this->commandTester = new CommandTester($command);
    }

    protected function tearDown(): void
    {
        $this->filesystem->remove(self::TEST_PROJECT_DIR);
    }

    public function test_it_can_generate_files(): void
    {
        $exitCode = $this->commandTester->execute([
            'fileCount' => 2,
            'projectRoot' => self::TEST_PROJECT_DIR,
        ]);

        self::assertSame(Command::SUCCESS, $exitCode);
        self::assertStringContainsString(
            'Generated 2 file(s).',
            $this->commandTester->getDisplay(),
        );

        $expectedFiles = [
            Path::canonicalize(self::TEST_PROJECT_DIR.'/DummyService0.php') => <<<'PHP'
            <?php
            
            namespace Infection\BenchmarkCodeGenerator\AutoGenerated\App;
            
            final class DummyService0
            {
            }

            PHP,
            Path::canonicalize(self::TEST_PROJECT_DIR.'/DummyService1.php') => <<<'PHP'
            <?php
            
            namespace Infection\BenchmarkCodeGenerator\AutoGenerated\App;
            
            final class DummyService1
            {
            }

            PHP,
        ];

        $actualFiles = self::collectGeneratedFiles();

        foreach ($actualFiles as $path => $file) {
            $canonicalPath = Path::canonicalize($path);

            self::assertArrayHasKey($canonicalPath, $expectedFiles);

            $expectedContent = $expectedFiles[$canonicalPath];
            self::assertSame($expectedContent, $file->getContents());

            unset($actualFiles[$path]);
        }

        self::assertSame(
            [],
            $actualFiles,
            'More files were generated than expected.',
        );
    }

    public function test_it_supports_a_dry_run_mode(): void
    {
        $exitCode = $this->commandTester->execute([
            'fileCount' => 2,
            'projectRoot' => self::TEST_PROJECT_DIR,
            '--dry-run' => true,
        ]);

        self::assertSame(Command::SUCCESS, $exitCode);
        self::assertStringContainsString(
            'Generated 2 file(s).',
            $this->commandTester->getDisplay(),
        );

        $actualFiles = self::collectGeneratedFiles();

        self::assertSame(
            [],
            $actualFiles,
            'More files were generated than expected.',
        );
    }

    /**
     * @return array<string, SplFileInfo>
     */
    private static function collectGeneratedFiles(): array
    {
        return iterator_to_array(
            Finder::create()
                ->files()
                ->in(self::TEST_PROJECT_DIR),
        );
    }
}
