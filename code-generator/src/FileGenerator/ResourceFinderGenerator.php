<?php

declare(strict_types=1);

namespace Infection\BenchmarkCodeGenerator\FileGenerator;

final readonly class ResourceFinderGenerator implements FileGenerator
{
    private const TEMPLATE = <<<'PHP'
    <?php
    
    declare(strict_types=1);
    
    namespace Infection\BenchmarkSource\AutoGenerated\Finder;
    
    use Infection\BenchmarkSource\CpuCoreFinder\ResourceFinder;
    use InvalidArgumentException;
    use function sprintf;
    
    final class ResourceFinder__ID__ implements ResourceFinder
    {
        /**
         * @var positive-int
         */
        private $count;
    
        public function diagnose(): string
        {
            return sprintf(
                'Will return "%d".',
                $this->count
            );
        }
    
        /**
         * @param positive-int $count
         */
        public function __construct(int $count)
        {
            if ($count < 1) {
                throw new InvalidArgumentException(
                    sprintf(
                        'Expected count to be a positive integer, got "%d".',
                        $count,
                    ),                
                );
            }
        
            $this->count = $count;
        }
    
        /** @phpstan-ignore return.unusedType */
        public function find(): ?int
        {
            return $this->count;
        }
    
        public function toString(): string
        {
            return sprintf(
                'ResourceFinder__ID__(value=%d)',
                $this->count
            );
        }
    }

    PHP;

    public function generate(string $id): GeneratedFile
    {
        return new GeneratedFile(
            sprintf(
                'src/AutoGenerated/Finder/ResourceFinder%s.php',
                $id,
            ),
            str_replace(
                '__ID__',
                $id,
                self::TEMPLATE,
            ),
        );
    }
}
