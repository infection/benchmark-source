<?php

declare(strict_types=1);

namespace Infection\BenchmarkCodeGenerator\FileGenerator;

final readonly class ValidatorTestGenerator implements FileGenerator
{
    private const TEMPLATE = <<<'PHP'
    <?php

    declare(strict_types=1);

    namespace Infection\BenchmarkSource\Test\AutoGenerated\Validator;

    use Infection\BenchmarkSource\AutoGenerated\Validator\Validator__ID__;
    use PHPUnit\Framework\Attributes\CoversClass;
    use PHPUnit\Framework\Attributes\DataProvider;
    use PHPUnit\Framework\TestCase;

    #[CoversClass(Validator__ID__::class)]
    final class Validator__ID__Test extends TestCase
    {
        private Validator__ID__ $validator;

        protected function setUp(): void
        {
            $this->validator = new Validator__ID__();
        }

        public function test_starts_with_no_errors(): void
        {
            self::assertFalse($this->validator->hasErrors());
            self::assertSame([], $this->validator->getErrors());
        }

        public function test_can_clear_errors(): void
        {
            $this->validator->validateRequired('field', '');

            self::assertTrue($this->validator->hasErrors());

            $this->validator->clearErrors();

            self::assertFalse($this->validator->hasErrors());
            self::assertSame([], $this->validator->getErrors());
        }

        #[DataProvider('requiredProvider')]
        public function test_validates_required(mixed $value, bool $expected): void
        {
            $result = $this->validator->validateRequired('field', $value);

            self::assertSame($expected, $result);
            self::assertSame($expected, !$this->validator->hasErrors());
        }

        public static function requiredProvider(): iterable
        {
            yield ['hello', true];
            yield [123, true];
            yield [true, true];
            yield ['', false];
            yield [null, false];
            yield [[], false];
        }

        #[DataProvider('stringProvider')]
        public function test_validates_string(mixed $value, bool $expected): void
        {
            $result = $this->validator->validateString('field', $value);

            self::assertSame($expected, $result);
        }

        public static function stringProvider(): iterable
        {
            yield ['hello', true];
            yield ['', true];
            yield [123, false];
            yield [true, false];
            yield [[], false];
        }

        #[DataProvider('integerProvider')]
        public function test_validates_integer(mixed $value, bool $expected): void
        {
            $result = $this->validator->validateInteger('field', $value);

            self::assertSame($expected, $result);
        }

        public static function integerProvider(): iterable
        {
            yield [123, true];
            yield [0, true];
            yield [-5, true];
            yield [1.5, false];
            yield ['123', false];
        }

        #[DataProvider('floatProvider')]
        public function test_validates_float(mixed $value, bool $expected): void
        {
            $result = $this->validator->validateFloat('field', $value);

            self::assertSame($expected, $result);
        }

        public static function floatProvider(): iterable
        {
            yield [1.5, true];
            yield [0.0, true];
            yield [-3.14, true];
            yield [123, false];
            yield ['1.5', false];
        }

        #[DataProvider('numericProvider')]
        public function test_validates_numeric(mixed $value, bool $expected): void
        {
            $result = $this->validator->validateNumeric('field', $value);

            self::assertSame($expected, $result);
        }

        public static function numericProvider(): iterable
        {
            yield [123, true];
            yield [1.5, true];
            yield ['123', true];
            yield ['1.5', true];
            yield ['abc', false];
            yield [true, false];
        }

        #[DataProvider('booleanProvider')]
        public function test_validates_boolean(mixed $value, bool $expected): void
        {
            $result = $this->validator->validateBoolean('field', $value);

            self::assertSame($expected, $result);
        }

        public static function booleanProvider(): iterable
        {
            yield [true, true];
            yield [false, true];
            yield [1, false];
            yield [0, false];
            yield ['true', false];
        }

        #[DataProvider('arrayProvider')]
        public function test_validates_array(mixed $value, bool $expected): void
        {
            $result = $this->validator->validateArray('field', $value);

            self::assertSame($expected, $result);
        }

        public static function arrayProvider(): iterable
        {
            yield [[], true];
            yield [[1, 2, 3], true];
            yield [['a' => 1], true];
            yield ['[]', false];
            yield [123, false];
        }

        #[DataProvider('emailProvider')]
        public function test_validates_email(mixed $value, bool $expected): void
        {
            $result = $this->validator->validateEmail('field', $value);

            self::assertSame($expected, $result);
        }

        public static function emailProvider(): iterable
        {
            yield ['test@example.com', true];
            yield ['user+tag@domain.co.uk', true];
            yield ['invalid', false];
            yield ['@example.com', false];
            yield ['test@', false];
            yield [123, false];
        }

        #[DataProvider('urlProvider')]
        public function test_validates_url(mixed $value, bool $expected): void
        {
            $result = $this->validator->validateUrl('field', $value);

            self::assertSame($expected, $result);
        }

        public static function urlProvider(): iterable
        {
            yield ['https://example.com', true];
            yield ['http://localhost', true];
            yield ['ftp://ftp.example.com', true];
            yield ['not a url', false];
            yield ['example.com', false];
            yield [123, false];
        }

        #[DataProvider('minLengthProvider')]
        public function test_validates_min_length(mixed $value, int $min, bool $expected): void
        {
            $result = $this->validator->validateMinLength('field', $value, $min);

            self::assertSame($expected, $result);
        }

        public static function minLengthProvider(): iterable
        {
            yield ['hello', 3, true];
            yield ['hello', 5, true];
            yield ['hello', 10, false];
            yield ['', 1, false];
            yield [123, 3, false];
        }

        #[DataProvider('maxLengthProvider')]
        public function test_validates_max_length(mixed $value, int $max, bool $expected): void
        {
            $result = $this->validator->validateMaxLength('field', $value, $max);

            self::assertSame($expected, $result);
        }

        public static function maxLengthProvider(): iterable
        {
            yield ['hello', 10, true];
            yield ['hello', 5, true];
            yield ['hello', 3, false];
            yield ['', 0, true];
        }

        public function test_validates_length(): void
        {
            self::assertTrue($this->validator->validateLength('field', 'hello', 3, 10));
            self::assertFalse($this->validator->validateLength('field', 'hi', 3, 10));
            self::assertFalse($this->validator->validateLength('field', 'hello world', 3, 10));
        }

        #[DataProvider('minProvider')]
        public function test_validates_min(mixed $value, int|float $min, bool $expected): void
        {
            $result = $this->validator->validateMin('field', $value, $min);

            self::assertSame($expected, $result);
        }

        public static function minProvider(): iterable
        {
            yield [10, 5, true];
            yield [5, 5, true];
            yield [3, 5, false];
            yield [10.5, 10.0, true];
            yield ['abc', 5, false];
        }

        #[DataProvider('maxProvider')]
        public function test_validates_max(mixed $value, int|float $max, bool $expected): void
        {
            $result = $this->validator->validateMax('field', $value, $max);

            self::assertSame($expected, $result);
        }

        public static function maxProvider(): iterable
        {
            yield [3, 5, true];
            yield [5, 5, true];
            yield [10, 5, false];
            yield [10.5, 11.0, true];
        }

        public function test_validates_range(): void
        {
            self::assertTrue($this->validator->validateRange('field', 5, 0, 10));
            self::assertFalse($this->validator->validateRange('field', -1, 0, 10));
            self::assertFalse($this->validator->validateRange('field', 11, 0, 10));
        }

        #[DataProvider('patternProvider')]
        public function test_validates_pattern(mixed $value, string $pattern, bool $expected): void
        {
            $result = $this->validator->validatePattern('field', $value, $pattern);

            self::assertSame($expected, $result);
        }

        public static function patternProvider(): iterable
        {
            yield ['abc', '/^[a-z]+$/', true];
            yield ['123', '/^[0-9]+$/', true];
            yield ['abc123', '/^[a-z]+$/', false];
            yield [123, '/^[0-9]+$/', false];
        }

        #[DataProvider('alphaProvider')]
        public function test_validates_alpha(mixed $value, bool $expected): void
        {
            $result = $this->validator->validateAlpha('field', $value);

            self::assertSame($expected, $result);
        }

        public static function alphaProvider(): iterable
        {
            yield ['abc', true];
            yield ['ABC', true];
            yield ['AbCdEf', true];
            yield ['abc123', false];
            yield ['abc def', false];
        }

        #[DataProvider('alphanumericProvider')]
        public function test_validates_alphanumeric(mixed $value, bool $expected): void
        {
            $result = $this->validator->validateAlphanumeric('field', $value);

            self::assertSame($expected, $result);
        }

        public static function alphanumericProvider(): iterable
        {
            yield ['abc', true];
            yield ['123', true];
            yield ['abc123', true];
            yield ['abc-123', false];
            yield ['abc def', false];
        }

        #[DataProvider('alphaDashProvider')]
        public function test_validates_alpha_dash(mixed $value, bool $expected): void
        {
            $result = $this->validator->validateAlphaDash('field', $value);

            self::assertSame($expected, $result);
        }

        public static function alphaDashProvider(): iterable
        {
            yield ['abc', true];
            yield ['abc-123', true];
            yield ['abc_123', true];
            yield ['abc-123_def', true];
            yield ['abc 123', false];
            yield ['abc@123', false];
        }

        #[DataProvider('inProvider')]
        public function test_validates_in(mixed $value, array $allowed, bool $expected): void
        {
            $result = $this->validator->validateIn('field', $value, $allowed);

            self::assertSame($expected, $result);
        }

        public static function inProvider(): iterable
        {
            yield ['apple', ['apple', 'banana', 'cherry'], true];
            yield ['orange', ['apple', 'banana', 'cherry'], false];
            yield [1, [1, 2, 3], true];
            yield [4, [1, 2, 3], false];
        }

        #[DataProvider('notInProvider')]
        public function test_validates_not_in(mixed $value, array $disallowed, bool $expected): void
        {
            $result = $this->validator->validateNotIn('field', $value, $disallowed);

            self::assertSame($expected, $result);
        }

        public static function notInProvider(): iterable
        {
            yield ['apple', ['banana', 'cherry'], true];
            yield ['apple', ['apple', 'banana', 'cherry'], false];
            yield [1, [2, 3, 4], true];
            yield [1, [1, 2, 3], false];
        }

        #[DataProvider('equalsProvider')]
        public function test_validates_equals(mixed $value, mixed $expected, bool $result): void
        {
            $valid = $this->validator->validateEquals('field', $value, $expected);

            self::assertSame($result, $valid);
        }

        public static function equalsProvider(): iterable
        {
            yield ['hello', 'hello', true];
            yield ['hello', 'world', false];
            yield [123, 123, true];
            yield [123, '123', false];
        }

        #[DataProvider('notEqualsProvider')]
        public function test_validates_not_equals(mixed $value, mixed $notExpected, bool $result): void
        {
            $valid = $this->validator->validateNotEquals('field', $value, $notExpected);

            self::assertSame($result, $valid);
        }

        public static function notEqualsProvider(): iterable
        {
            yield ['hello', 'world', true];
            yield ['hello', 'hello', false];
            yield [123, '123', true];
            yield [123, 123, false];
        }

        #[DataProvider('containsProvider')]
        public function test_validates_contains(mixed $value, string $needle, bool $expected): void
        {
            $result = $this->validator->validateContains('field', $value, $needle);

            self::assertSame($expected, $result);
        }

        public static function containsProvider(): iterable
        {
            yield ['hello world', 'world', true];
            yield ['hello world', 'xyz', false];
            yield ['hello', 'hello', true];
            yield [123, 'hello', false];
        }

        #[DataProvider('startsWithProvider')]
        public function test_validates_starts_with(mixed $value, string $prefix, bool $expected): void
        {
            $result = $this->validator->validateStartsWith('field', $value, $prefix);

            self::assertSame($expected, $result);
        }

        public static function startsWithProvider(): iterable
        {
            yield ['hello world', 'hello', true];
            yield ['hello world', 'world', false];
            yield ['hello', 'hello', true];
        }

        #[DataProvider('endsWithProvider')]
        public function test_validates_ends_with(mixed $value, string $suffix, bool $expected): void
        {
            $result = $this->validator->validateEndsWith('field', $value, $suffix);

            self::assertSame($expected, $result);
        }

        public static function endsWithProvider(): iterable
        {
            yield ['hello world', 'world', true];
            yield ['hello world', 'hello', false];
            yield ['hello', 'hello', true];
        }

        #[DataProvider('arrayMinCountProvider')]
        public function test_validates_array_min_count(mixed $value, int $min, bool $expected): void
        {
            $result = $this->validator->validateArrayMinCount('field', $value, $min);

            self::assertSame($expected, $result);
        }

        public static function arrayMinCountProvider(): iterable
        {
            yield [[1, 2, 3], 2, true];
            yield [[1, 2, 3], 3, true];
            yield [[1, 2, 3], 4, false];
            yield [[], 1, false];
            yield ['abc', 1, false];
        }

        #[DataProvider('arrayMaxCountProvider')]
        public function test_validates_array_max_count(mixed $value, int $max, bool $expected): void
        {
            $result = $this->validator->validateArrayMaxCount('field', $value, $max);

            self::assertSame($expected, $result);
        }

        public static function arrayMaxCountProvider(): iterable
        {
            yield [[1, 2, 3], 5, true];
            yield [[1, 2, 3], 3, true];
            yield [[1, 2, 3], 2, false];
        }

        public function test_validates_array_count(): void
        {
            self::assertTrue($this->validator->validateArrayCount('field', [1, 2, 3], 2, 5));
            self::assertFalse($this->validator->validateArrayCount('field', [1], 2, 5));
            self::assertFalse($this->validator->validateArrayCount('field', [1, 2, 3, 4, 5, 6], 2, 5));
        }

        #[DataProvider('arrayHasKeysProvider')]
        public function test_validates_array_has_keys(mixed $value, array $requiredKeys, bool $expected): void
        {
            $result = $this->validator->validateArrayHasKeys('field', $value, $requiredKeys);

            self::assertSame($expected, $result);
        }

        public static function arrayHasKeysProvider(): iterable
        {
            yield [['a' => 1, 'b' => 2, 'c' => 3], ['a', 'b'], true];
            yield [['a' => 1, 'b' => 2], ['a', 'b', 'c'], false];
            yield [[], [], true];
            yield ['abc', ['a'], false];
        }

        #[DataProvider('dateProvider')]
        public function test_validates_date(mixed $value, string $format, bool $expected): void
        {
            $result = $this->validator->validateDate('field', $value, $format);

            self::assertSame($expected, $result);
        }

        public static function dateProvider(): iterable
        {
            yield ['2024-01-15', 'Y-m-d', true];
            yield ['15/01/2024', 'd/m/Y', true];
            yield ['2024-13-01', 'Y-m-d', false];
            yield ['invalid', 'Y-m-d', false];
            yield [123, 'Y-m-d', false];
        }

        #[DataProvider('dateBeforeProvider')]
        public function test_validates_date_before(mixed $value, string $before, bool $expected): void
        {
            $result = $this->validator->validateDateBefore('field', $value, $before);

            self::assertSame($expected, $result);
        }

        public static function dateBeforeProvider(): iterable
        {
            yield ['2024-01-01', '2024-12-31', true];
            yield ['2024-12-31', '2024-01-01', false];
            yield ['2024-01-01', '2024-01-01', false];
        }

        #[DataProvider('dateAfterProvider')]
        public function test_validates_date_after(mixed $value, string $after, bool $expected): void
        {
            $result = $this->validator->validateDateAfter('field', $value, $after);

            self::assertSame($expected, $result);
        }

        public static function dateAfterProvider(): iterable
        {
            yield ['2024-12-31', '2024-01-01', true];
            yield ['2024-01-01', '2024-12-31', false];
            yield ['2024-01-01', '2024-01-01', false];
        }

        #[DataProvider('ipAddressProvider')]
        public function test_validates_ip_address(mixed $value, bool $expected): void
        {
            $result = $this->validator->validateIpAddress('field', $value);

            self::assertSame($expected, $result);
        }

        public static function ipAddressProvider(): iterable
        {
            yield ['192.168.1.1', true];
            yield ['127.0.0.1', true];
            yield ['::1', true];
            yield ['2001:0db8:85a3::8a2e:0370:7334', true];
            yield ['256.1.1.1', false];
            yield ['invalid', false];
            yield [123, false];
        }

        #[DataProvider('ipv4Provider')]
        public function test_validates_ipv4(mixed $value, bool $expected): void
        {
            $result = $this->validator->validateIpv4('field', $value);

            self::assertSame($expected, $result);
        }

        public static function ipv4Provider(): iterable
        {
            yield ['192.168.1.1', true];
            yield ['127.0.0.1', true];
            yield ['::1', false];
            yield ['invalid', false];
        }

        #[DataProvider('ipv6Provider')]
        public function test_validates_ipv6(mixed $value, bool $expected): void
        {
            $result = $this->validator->validateIpv6('field', $value);

            self::assertSame($expected, $result);
        }

        public static function ipv6Provider(): iterable
        {
            yield ['::1', true];
            yield ['2001:0db8:85a3::8a2e:0370:7334', true];
            yield ['192.168.1.1', false];
            yield ['invalid', false];
        }

        #[DataProvider('jsonProvider')]
        public function test_validates_json(mixed $value, bool $expected): void
        {
            $result = $this->validator->validateJson('field', $value);

            self::assertSame($expected, $result);
        }

        public static function jsonProvider(): iterable
        {
            yield ['{"key": "value"}', true];
            yield ['[]', true];
            yield ['null', true];
            yield ['{invalid}', false];
            yield ['', false];
            yield [123, false];
        }

        #[DataProvider('uuidProvider')]
        public function test_validates_uuid(mixed $value, bool $expected): void
        {
            $result = $this->validator->validateUuid('field', $value);

            self::assertSame($expected, $result);
        }

        public static function uuidProvider(): iterable
        {
            yield ['550e8400-e29b-41d4-a716-446655440000', true];
            yield ['123e4567-e89b-12d3-a456-426614174000', true];
            yield ['invalid-uuid', false];
            yield ['550e8400e29b41d4a716446655440000', false];
            yield [123, false];
        }

        public function test_validates_all(): void
        {
            $data = [
                'name' => 'John',
                'age' => 30,
                'email' => 'john@example.com',
            ];

            $rules = [
                'name' => fn ($value) => $this->validator->validateString('name', $value),
                'age' => fn ($value) => $this->validator->validateInteger('age', $value),
                'email' => fn ($value) => $this->validator->validateEmail('email', $value),
            ];

            $result = $this->validator->validateAll($data, $rules);

            self::assertTrue($result);
            self::assertFalse($this->validator->hasErrors());
        }

        public function test_validates_all_with_errors(): void
        {
            $data = [
                'name' => 123,
                'age' => 'not a number',
                'email' => 'invalid',
            ];

            $rules = [
                'name' => fn ($value) => $this->validator->validateString('name', $value),
                'age' => fn ($value) => $this->validator->validateInteger('age', $value),
                'email' => fn ($value) => $this->validator->validateEmail('email', $value),
            ];

            $result = $this->validator->validateAll($data, $rules);

            self::assertFalse($result);
            self::assertTrue($this->validator->hasErrors());
            self::assertCount(3, $this->validator->getErrors());
        }
    }

    PHP;

    public function generate(string $id): GeneratedFile
    {
        return new GeneratedFile(
            sprintf(
                'tests/AutoGenerated/Validator/Validator%sTest.php',
                $id,
            ),
            str_replace(
                '__ID__',
                $id,
                self::TEMPLATE,
            ),
        );
    }
}
