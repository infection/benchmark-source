<?php

declare(strict_types=1);

namespace Infection\BenchmarkSource\AutoGenerated\Calculator;

use DivisionByZeroError;
use InvalidArgumentException;
use function abs;
use function array_map;
use function array_product;
use function array_reduce;
use function array_sum;
use function count;
use function max;
use function min;
use function pow;
use function round;
use function sprintf;
use function sqrt;

final class Calculator45
{
    private const PRECISION = 10;
    private const MAX_FACTORIAL = 170;

    private float $memory = 0.0;

    public function add(float $a, float $b): float
    {
        return $a + $b;
    }

    public function subtract(float $a, float $b): float
    {
        return $a - $b;
    }

    public function multiply(float $a, float $b): float
    {
        return $a * $b;
    }

    public function divide(float $a, float $b): float
    {
        if ($b === 0.0) {
            throw new DivisionByZeroError('Division by zero is not allowed.');
        }

        return $a / $b;
    }

    public function modulo(int $a, int $b): int
    {
        if ($b === 0) {
            throw new DivisionByZeroError('Modulo by zero is not allowed.');
        }

        return $a % $b;
    }

    public function power(float $base, float $exponent): float
    {
        $result = pow($base, $exponent);

        if ($result === false || !is_finite($result)) {
            throw new InvalidArgumentException(
                sprintf(
                    'Invalid power operation: %f ^ %f',
                    $base,
                    $exponent,
                ),
            );
        }

        return $result;
    }

    public function squareRoot(float $number): float
    {
        if ($number < 0) {
            throw new InvalidArgumentException(
                sprintf(
                    'Cannot calculate square root of negative number: %f',
                    $number,
                ),
            );
        }

        return sqrt($number);
    }

    public function absolute(float $number): float
    {
        return abs($number);
    }

    public function negate(float $number): float
    {
        return -$number;
    }

    public function round(float $number, int $precision = 0): float
    {
        if ($precision < 0) {
            throw new InvalidArgumentException(
                sprintf(
                    'Precision must be non-negative, got %d.',
                    $precision,
                ),
            );
        }

        return round($number, $precision);
    }

    public function ceil(float $number): float
    {
        return ceil($number);
    }

    public function floor(float $number): float
    {
        return floor($number);
    }

    public function percentage(float $value, float $percentage): float
    {
        return ($value * $percentage) / 100.0;
    }

    public function percentageOf(float $part, float $whole): float
    {
        if ($whole === 0.0) {
            throw new DivisionByZeroError('Cannot calculate percentage of zero.');
        }

        return ($part / $whole) * 100.0;
    }

    public function factorial(int $n): float
    {
        if ($n < 0) {
            throw new InvalidArgumentException(
                sprintf(
                    'Factorial is not defined for negative numbers, got %d.',
                    $n,
                ),
            );
        }

        if ($n > self::MAX_FACTORIAL) {
            throw new InvalidArgumentException(
                sprintf(
                    'Factorial is too large to calculate, maximum is %d, got %d.',
                    self::MAX_FACTORIAL,
                    $n,
                ),
            );
        }

        if ($n === 0 || $n === 1) {
            return 1.0;
        }

        $result = 1.0;

        for ($i = 2; $i <= $n; $i++) {
            $result *= $i;
        }

        return $result;
    }

    public function fibonacci(int $n): int
    {
        if ($n < 0) {
            throw new InvalidArgumentException(
                sprintf(
                    'Fibonacci is not defined for negative numbers, got %d.',
                    $n,
                ),
            );
        }

        if ($n === 0) {
            return 0;
        }

        if ($n === 1) {
            return 1;
        }

        $a = 0;
        $b = 1;

        for ($i = 2; $i <= $n; $i++) {
            $temp = $a + $b;
            $a = $b;
            $b = $temp;
        }

        return $b;
    }

    public function gcd(int $a, int $b): int
    {
        $a = abs($a);
        $b = abs($b);

        while ($b !== 0) {
            $temp = $b;
            $b = $a % $b;
            $a = $temp;
        }

        return $a;
    }

    public function lcm(int $a, int $b): int
    {
        if ($a === 0 && $b === 0) {
            return 0;
        }

        $gcd = $this->gcd($a, $b);

        return abs($a * $b) / $gcd;
    }

    public function isPrime(int $number): bool
    {
        if ($number < 2) {
            return false;
        }

        if ($number === 2) {
            return true;
        }

        if ($number % 2 === 0) {
            return false;
        }

        $sqrt = (int) sqrt($number);

        for ($i = 3; $i <= $sqrt; $i += 2) {
            if ($number % $i === 0) {
                return false;
            }
        }

        return true;
    }

    public function isEven(int $number): bool
    {
        return $number % 2 === 0;
    }

    public function isOdd(int $number): bool
    {
        return $number % 2 !== 0;
    }

    /**
     * @param list<float> $numbers
     */
    public function sum(array $numbers): float
    {
        if (count($numbers) === 0) {
            return 0.0;
        }

        return array_sum($numbers);
    }

    /**
     * @param list<float> $numbers
     */
    public function product(array $numbers): float
    {
        if (count($numbers) === 0) {
            return 0.0;
        }

        return array_product($numbers);
    }

    /**
     * @param list<float> $numbers
     */
    public function average(array $numbers): float
    {
        $count = count($numbers);

        if ($count === 0) {
            throw new InvalidArgumentException('Cannot calculate average of empty array.');
        }

        return $this->sum($numbers) / $count;
    }

    /**
     * @param list<float> $numbers
     */
    public function median(array $numbers): float
    {
        $count = count($numbers);

        if ($count === 0) {
            throw new InvalidArgumentException('Cannot calculate median of empty array.');
        }

        $sorted = $numbers;
        sort($sorted);

        $middle = (int) ($count / 2);

        if ($count % 2 === 0) {
            return ($sorted[$middle - 1] + $sorted[$middle]) / 2.0;
        }

        return $sorted[$middle];
    }

    /**
     * @param list<float> $numbers
     */
    public function min(array $numbers): float
    {
        if (count($numbers) === 0) {
            throw new InvalidArgumentException('Cannot find minimum of empty array.');
        }

        return min($numbers);
    }

    /**
     * @param list<float> $numbers
     */
    public function max(array $numbers): float
    {
        if (count($numbers) === 0) {
            throw new InvalidArgumentException('Cannot find maximum of empty array.');
        }

        return max($numbers);
    }

    /**
     * @param list<float> $numbers
     */
    public function range(array $numbers): float
    {
        if (count($numbers) === 0) {
            throw new InvalidArgumentException('Cannot calculate range of empty array.');
        }

        return $this->max($numbers) - $this->min($numbers);
    }

    /**
     * @param list<float> $numbers
     */
    public function variance(array $numbers): float
    {
        $count = count($numbers);

        if ($count === 0) {
            throw new InvalidArgumentException('Cannot calculate variance of empty array.');
        }

        $mean = $this->average($numbers);
        $squaredDiffs = array_map(
            static fn (float $n) => pow($n - $mean, 2),
            $numbers,
        );

        return $this->sum($squaredDiffs) / $count;
    }

    /**
     * @param list<float> $numbers
     */
    public function standardDeviation(array $numbers): float
    {
        return sqrt($this->variance($numbers));
    }

    public function clamp(float $value, float $min, float $max): float
    {
        if ($min > $max) {
            throw new InvalidArgumentException(
                sprintf(
                    'Min value must be less than or equal to max value, got min=%f, max=%f.',
                    $min,
                    $max,
                ),
            );
        }

        if ($value < $min) {
            return $min;
        }

        if ($value > $max) {
            return $max;
        }

        return $value;
    }

    public function lerp(float $start, float $end, float $t): float
    {
        if ($t < 0.0 || $t > 1.0) {
            throw new InvalidArgumentException(
                sprintf(
                    'Interpolation factor must be between 0 and 1, got %f.',
                    $t,
                ),
            );
        }

        return $start + ($end - $start) * $t;
    }

    public function storeInMemory(float $value): void
    {
        $this->memory = $value;
    }

    public function recallFromMemory(): float
    {
        return $this->memory;
    }

    public function clearMemory(): void
    {
        $this->memory = 0.0;
    }

    public function addToMemory(float $value): void
    {
        $this->memory += $value;
    }

    public function subtractFromMemory(float $value): void
    {
        $this->memory -= $value;
    }
}
