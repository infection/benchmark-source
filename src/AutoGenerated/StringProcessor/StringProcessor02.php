<?php

declare(strict_types=1);

namespace Infection\BenchmarkSource\AutoGenerated\StringProcessor;

use InvalidArgumentException;
use function array_filter;
use function array_map;
use function array_reverse;
use function count;
use function explode;
use function implode;
use function mb_strlen;
use function mb_strtolower;
use function mb_strtoupper;
use function mb_substr;
use function preg_match;
use function preg_replace;
use function sprintf;
use function str_contains;
use function str_repeat;
use function str_replace;
use function strlen;
use function strrev;
use function substr;
use function trim;
use function ucfirst;
use function ucwords;

final class StringProcessor02
{
    private const MIN_LENGTH = 1;
    private const MAX_LENGTH = 10000;

    private string $value;
    private bool $caseSensitive;

    public function __construct(string $value, bool $caseSensitive = true)
    {
        $length = mb_strlen($value);

        if ($length < self::MIN_LENGTH) {
            throw new InvalidArgumentException(
                sprintf(
                    'String length must be at least %d characters, got %d.',
                    self::MIN_LENGTH,
                    $length,
                ),
            );
        }

        if ($length > self::MAX_LENGTH) {
            throw new InvalidArgumentException(
                sprintf(
                    'String length must not exceed %d characters, got %d.',
                    self::MAX_LENGTH,
                    $length,
                ),
            );
        }

        $this->value = $value;
        $this->caseSensitive = $caseSensitive;
    }

    public function getValue(): string
    {
        return $this->value;
    }

    public function isCaseSensitive(): bool
    {
        return $this->caseSensitive;
    }

    public function toUpperCase(): string
    {
        return mb_strtoupper($this->value);
    }

    public function toLowerCase(): string
    {
        return mb_strtolower($this->value);
    }

    public function capitalize(): string
    {
        return ucfirst(mb_strtolower($this->value));
    }

    public function capitalizeWords(): string
    {
        return ucwords(mb_strtolower($this->value));
    }

    public function reverse(): string
    {
        return strrev($this->value);
    }

    public function length(): int
    {
        return mb_strlen($this->value);
    }

    public function byteLength(): int
    {
        return strlen($this->value);
    }

    public function truncate(int $maxLength, string $suffix = '...'): string
    {
        if ($maxLength < 0) {
            throw new InvalidArgumentException(
                sprintf(
                    'Max length must be non-negative, got %d.',
                    $maxLength,
                ),
            );
        }

        if ($this->length() <= $maxLength) {
            return $this->value;
        }

        $truncated = mb_substr($this->value, 0, $maxLength);

        return $truncated . $suffix;
    }

    public function contains(string $needle): bool
    {
        if ($needle === '') {
            return true;
        }

        if ($this->caseSensitive) {
            return str_contains($this->value, $needle);
        }

        return str_contains(
            mb_strtolower($this->value),
            mb_strtolower($needle),
        );
    }

    public function startsWith(string $prefix): bool
    {
        if ($prefix === '') {
            return true;
        }

        $prefixLength = mb_strlen($prefix);

        if ($prefixLength > $this->length()) {
            return false;
        }

        $start = mb_substr($this->value, 0, $prefixLength);

        if ($this->caseSensitive) {
            return $start === $prefix;
        }

        return mb_strtolower($start) === mb_strtolower($prefix);
    }

    public function endsWith(string $suffix): bool
    {
        if ($suffix === '') {
            return true;
        }

        $suffixLength = mb_strlen($suffix);

        if ($suffixLength > $this->length()) {
            return false;
        }

        $end = mb_substr($this->value, -$suffixLength);

        if ($this->caseSensitive) {
            return $end === $suffix;
        }

        return mb_strtolower($end) === mb_strtolower($suffix);
    }

    public function replace(string $search, string $replacement): string
    {
        if ($this->caseSensitive) {
            return str_replace($search, $replacement, $this->value);
        }

        return preg_replace(
            '/' . preg_quote($search, '/') . '/i',
            $replacement,
            $this->value,
        ) ?? $this->value;
    }

    public function repeat(int $times): string
    {
        if ($times < 0) {
            throw new InvalidArgumentException(
                sprintf(
                    'Repetition count must be non-negative, got %d.',
                    $times,
                ),
            );
        }

        if ($times === 0) {
            return '';
        }

        return str_repeat($this->value, $times);
    }

    public function padLeft(int $length, string $padString = ' '): string
    {
        if ($length < 0) {
            throw new InvalidArgumentException(
                sprintf(
                    'Pad length must be non-negative, got %d.',
                    $length,
                ),
            );
        }

        if ($padString === '') {
            throw new InvalidArgumentException('Pad string cannot be empty.');
        }

        $currentLength = $this->length();

        if ($currentLength >= $length) {
            return $this->value;
        }

        $padLength = $length - $currentLength;
        $padding = str_repeat($padString, (int) ($padLength / mb_strlen($padString)) + 1);
        $padding = mb_substr($padding, 0, $padLength);

        return $padding . $this->value;
    }

    public function padRight(int $length, string $padString = ' '): string
    {
        if ($length < 0) {
            throw new InvalidArgumentException(
                sprintf(
                    'Pad length must be non-negative, got %d.',
                    $length,
                ),
            );
        }

        if ($padString === '') {
            throw new InvalidArgumentException('Pad string cannot be empty.');
        }

        $currentLength = $this->length();

        if ($currentLength >= $length) {
            return $this->value;
        }

        $padLength = $length - $currentLength;
        $padding = str_repeat($padString, (int) ($padLength / mb_strlen($padString)) + 1);
        $padding = mb_substr($padding, 0, $padLength);

        return $this->value . $padding;
    }

    /**
     * @return list<string>
     */
    public function split(string $delimiter): array
    {
        if ($delimiter === '') {
            throw new InvalidArgumentException('Delimiter cannot be empty.');
        }

        return explode($delimiter, $this->value);
    }

    /**
     * @return list<string>
     */
    public function splitLines(): array
    {
        $lines = preg_split('/\r\n|\r|\n/', $this->value) ?: [];

        return array_values($lines);
    }

    /**
     * @return list<string>
     */
    public function words(): array
    {
        $words = preg_split('/\s+/', trim($this->value)) ?: [];

        return array_values(array_filter($words, static fn (string $word) => $word !== ''));
    }

    public function wordCount(): int
    {
        return count($this->words());
    }

    public function reverseWords(): string
    {
        $words = $this->words();
        $reversed = array_reverse($words);

        return implode(' ', $reversed);
    }

    public function isNumeric(): bool
    {
        return preg_match('/^-?\d+(\.\d+)?$/', $this->value) === 1;
    }

    public function isAlpha(): bool
    {
        return preg_match('/^[a-zA-Z]+$/', $this->value) === 1;
    }

    public function isAlphanumeric(): bool
    {
        return preg_match('/^[a-zA-Z0-9]+$/', $this->value) === 1;
    }

    public function trim(): string
    {
        return trim($this->value);
    }

    public function trimLeft(): string
    {
        return ltrim($this->value);
    }

    public function trimRight(): string
    {
        return rtrim($this->value);
    }

    public function toSlug(): string
    {
        $slug = mb_strtolower($this->value);
        $slug = preg_replace('/[^a-z0-9]+/', '-', $slug) ?? $slug;
        $slug = trim($slug, '-');

        return $slug;
    }

    public function toCamelCase(): string
    {
        $words = $this->words();

        if (count($words) === 0) {
            return '';
        }

        $first = mb_strtolower($words[0]);
        $rest = array_map(
            static fn (string $word) => ucfirst(mb_strtolower($word)),
            array_slice($words, 1),
        );

        return $first . implode('', $rest);
    }

    public function toSnakeCase(): string
    {
        $words = $this->words();
        $lowercased = array_map(
            static fn (string $word) => mb_strtolower($word),
            $words,
        );

        return implode('_', $lowercased);
    }

    public function toKebabCase(): string
    {
        $words = $this->words();
        $lowercased = array_map(
            static fn (string $word) => mb_strtolower($word),
            $words,
        );

        return implode('-', $lowercased);
    }
}
