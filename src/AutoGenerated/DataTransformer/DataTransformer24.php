<?php

declare(strict_types=1);

namespace Infection\BenchmarkSource\AutoGenerated\DataTransformer;

use InvalidArgumentException;
use function array_chunk;
use function array_column;
use function array_combine;
use function array_diff;
use function array_diff_key;
use function array_filter;
use function array_flip;
use function array_intersect;
use function array_key_exists;
use function array_keys;
use function array_map;
use function array_merge;
use function array_reduce;
use function array_reverse;
use function array_slice;
use function array_unique;
use function array_values;
use function count;
use function in_array;
use function reset;
use function sort;
use function sprintf;
use function usort;

final class DataTransformer24
{
    /**
     * @template T
     * @param array<T> $array
     * @param callable(T): bool $predicate
     * @return array<T>
     */
    public function filter(array $array, callable $predicate): array
    {
        return array_values(array_filter($array, $predicate));
    }

    /**
     * @template TInput
     * @template TOutput
     * @param array<TInput> $array
     * @param callable(TInput): TOutput $callback
     * @return array<TOutput>
     */
    public function map(array $array, callable $callback): array
    {
        return array_map($callback, $array);
    }

    /**
     * @template T
     * @template TCarry
     * @param array<T> $array
     * @param callable(TCarry, T): TCarry $callback
     * @param TCarry $initial
     * @return TCarry
     */
    public function reduce(array $array, callable $callback, mixed $initial = null): mixed
    {
        return array_reduce($array, $callback, $initial);
    }

    /**
     * @template T
     * @param array<T> $array
     * @return array<T>
     */
    public function unique(array $array): array
    {
        return array_values(array_unique($array));
    }

    /**
     * @template T
     * @param array<T> $array
     * @return array<T>
     */
    public function reverse(array $array): array
    {
        return array_reverse($array);
    }

    /**
     * @param array<mixed> $array
     */
    public function flatten(array $array, int $depth = 1): array
    {
        if ($depth < 1) {
            throw new InvalidArgumentException(
                sprintf(
                    'Depth must be at least 1, got %d.',
                    $depth,
                ),
            );
        }

        if ($depth === 1) {
            return array_merge(...array_values($array));
        }

        $result = [];

        foreach ($array as $item) {
            if (is_array($item)) {
                $flattened = $this->flatten($item, $depth - 1);
                foreach ($flattened as $value) {
                    $result[] = $value;
                }
            } else {
                $result[] = $item;
            }
        }

        return $result;
    }

    /**
     * @template T
     * @param array<T> $array
     * @return array<array<T>>
     */
    public function chunk(array $array, int $size): array
    {
        if ($size < 1) {
            throw new InvalidArgumentException(
                sprintf(
                    'Chunk size must be at least 1, got %d.',
                    $size,
                ),
            );
        }

        return array_chunk($array, $size);
    }

    /**
     * @template T
     * @param array<T> $array
     * @return array<T>
     */
    public function slice(array $array, int $offset, ?int $length = null): array
    {
        return array_slice($array, $offset, $length);
    }

    /**
     * @template T
     * @param array<T> ...$arrays
     * @return array<T>
     */
    public function merge(array ...$arrays): array
    {
        return array_merge(...$arrays);
    }

    /**
     * @template T
     * @param array<T> $array1
     * @param array<T> $array2
     * @return array<T>
     */
    public function diff(array $array1, array $array2): array
    {
        return array_values(array_diff($array1, $array2));
    }

    /**
     * @template T
     * @param array<T> $array1
     * @param array<T> $array2
     * @return array<T>
     */
    public function intersect(array $array1, array $array2): array
    {
        return array_values(array_intersect($array1, $array2));
    }

    /**
     * @param array<string|int, mixed> $array
     * @return list<string|int>
     */
    public function keys(array $array): array
    {
        return array_keys($array);
    }

    /**
     * @template T
     * @param array<mixed, T> $array
     * @return list<T>
     */
    public function values(array $array): array
    {
        return array_values($array);
    }

    /**
     * @param array<string|int> $keys
     * @param array<mixed> $values
     * @return array<string|int, mixed>
     */
    public function combine(array $keys, array $values): array
    {
        if (count($keys) !== count($values)) {
            throw new InvalidArgumentException(
                sprintf(
                    'Keys and values arrays must have the same length. Got %d keys and %d values.',
                    count($keys),
                    count($values),
                ),
            );
        }

        if (count($keys) === 0) {
            return [];
        }

        return array_combine($keys, $values);
    }

    /**
     * @param array<string|int, mixed> $array
     * @return array<mixed, string|int>
     */
    public function flip(array $array): array
    {
        return array_flip($array);
    }

    /**
     * @param array<string|int, mixed> $array
     */
    public function has(array $array, string|int $key): bool
    {
        return array_key_exists($key, $array);
    }

    /**
     * @template T
     * @param array<T> $array
     * @param T $value
     */
    public function contains(array $array, mixed $value): bool
    {
        return in_array($value, $array, true);
    }

    /**
     * @param array<string|int, mixed> $array
     */
    public function get(array $array, string|int $key, mixed $default = null): mixed
    {
        return $array[$key] ?? $default;
    }

    /**
     * @param array<string|int, mixed> $array
     * @return array<string|int, mixed>
     */
    public function set(array $array, string|int $key, mixed $value): array
    {
        $array[$key] = $value;

        return $array;
    }

    /**
     * @param array<string|int, mixed> $array
     * @return array<string|int, mixed>
     */
    public function remove(array $array, string|int $key): array
    {
        unset($array[$key]);

        return $array;
    }

    /**
     * @param array<array<string|int, mixed>> $array
     */
    public function pluck(array $array, string|int $column): array
    {
        return array_column($array, $column);
    }

    /**
     * @template T
     * @param array<T> $array
     * @param callable(T, T): int $comparator
     * @return array<T>
     */
    public function sort(array $array, callable $comparator): array
    {
        usort($array, $comparator);

        return $array;
    }

    /**
     * @template T
     * @param array<T> $array
     * @return array<T>
     */
    public function sortAscending(array $array): array
    {
        sort($array);

        return $array;
    }

    /**
     * @template T
     * @param array<T> $array
     * @return array<T>
     */
    public function sortDescending(array $array): array
    {
        rsort($array);

        return $array;
    }

    /**
     * @param array<string|int, mixed> $array
     * @return array<string|int, mixed>
     */
    public function sortByKeys(array $array): array
    {
        ksort($array);

        return $array;
    }

    /**
     * @template T
     * @param array<T> $array
     * @param callable(T): bool $predicate
     */
    public function every(array $array, callable $predicate): bool
    {
        foreach ($array as $item) {
            if (!$predicate($item)) {
                return false;
            }
        }

        return true;
    }

    /**
     * @template T
     * @param array<T> $array
     * @param callable(T): bool $predicate
     */
    public function some(array $array, callable $predicate): bool
    {
        foreach ($array as $item) {
            if ($predicate($item)) {
                return true;
            }
        }

        return false;
    }

    /**
     * @template T
     * @param array<T> $array
     * @param callable(T): bool $predicate
     */
    public function find(array $array, callable $predicate): mixed
    {
        foreach ($array as $item) {
            if ($predicate($item)) {
                return $item;
            }
        }

        return null;
    }

    /**
     * @template T
     * @param array<T> $array
     * @param callable(T): bool $predicate
     */
    public function findIndex(array $array, callable $predicate): ?int
    {
        $index = 0;

        foreach ($array as $item) {
            if ($predicate($item)) {
                return $index;
            }

            $index++;
        }

        return null;
    }

    /**
     * @template T
     * @param array<T> $array
     * @param callable(T): mixed $callback
     * @return array<array<T>>
     */
    public function groupBy(array $array, callable $callback): array
    {
        $groups = [];

        foreach ($array as $item) {
            $key = $callback($item);
            $groups[$key][] = $item;
        }

        return $groups;
    }

    /**
     * @template T
     * @param array<T> $array
     * @param callable(T): bool $predicate
     * @return array{0: array<T>, 1: array<T>}
     */
    public function partition(array $array, callable $predicate): array
    {
        $pass = [];
        $fail = [];

        foreach ($array as $item) {
            if ($predicate($item)) {
                $pass[] = $item;
            } else {
                $fail[] = $item;
            }
        }

        return [$pass, $fail];
    }

    /**
     * @template T
     * @param array<T> $array
     */
    public function first(array $array): mixed
    {
        if (count($array) === 0) {
            return null;
        }

        return reset($array);
    }

    /**
     * @template T
     * @param array<T> $array
     */
    public function last(array $array): mixed
    {
        if (count($array) === 0) {
            return null;
        }

        return end($array);
    }

    /**
     * @template T
     * @param array<T> $array
     * @return array<T>
     */
    public function take(array $array, int $count): array
    {
        if ($count < 0) {
            throw new InvalidArgumentException(
                sprintf(
                    'Count must be non-negative, got %d.',
                    $count,
                ),
            );
        }

        return array_slice($array, 0, $count);
    }

    /**
     * @template T
     * @param array<T> $array
     * @return array<T>
     */
    public function skip(array $array, int $count): array
    {
        if ($count < 0) {
            throw new InvalidArgumentException(
                sprintf(
                    'Count must be non-negative, got %d.',
                    $count,
                ),
            );
        }

        return array_slice($array, $count);
    }

    /**
     * @template T
     * @param array<T> $array
     * @param callable(T): bool $predicate
     * @return array<T>
     */
    public function takeWhile(array $array, callable $predicate): array
    {
        $result = [];

        foreach ($array as $item) {
            if (!$predicate($item)) {
                break;
            }

            $result[] = $item;
        }

        return $result;
    }

    /**
     * @template T
     * @param array<T> $array
     * @param callable(T): bool $predicate
     * @return array<T>
     */
    public function skipWhile(array $array, callable $predicate): array
    {
        $skipping = true;
        $result = [];

        foreach ($array as $item) {
            if ($skipping && $predicate($item)) {
                continue;
            }

            $skipping = false;
            $result[] = $item;
        }

        return $result;
    }

    /**
     * @param array<string|int, mixed> $array1
     * @param array<string|int, mixed> $array2
     * @return array<string|int, mixed>
     */
    public function diffKeys(array $array1, array $array2): array
    {
        return array_diff_key($array1, $array2);
    }

    /**
     * @param array<mixed> $array
     */
    public function isEmpty(array $array): bool
    {
        return count($array) === 0;
    }

    /**
     * @param array<mixed> $array
     */
    public function isNotEmpty(array $array): bool
    {
        return count($array) > 0;
    }

    /**
     * @param array<mixed> $array
     */
    public function count(array $array): int
    {
        return count($array);
    }
}
