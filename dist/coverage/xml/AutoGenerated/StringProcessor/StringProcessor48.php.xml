<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="StringProcessor48.php" path="/AutoGenerated/StringProcessor">
    <totals>
      <lines total="400" comments="9" code="391" executable="156" executed="143" percent="91.67"/>
      <methods count="33" tested="27" percent="81.82"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="0" percent="0.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="Infection\BenchmarkSource\AutoGenerated\StringProcessor\StringProcessor48" start="31" executable="156" executed="143" crap="59.95">
      <namespace name="Infection\BenchmarkSource\AutoGenerated\StringProcessor"/>
      <method name="__construct" signature="__construct(string $value, bool $caseSensitive)" start="39" end="65" crap="3" executable="19" executed="19" coverage="100"/>
      <method name="getValue" signature="getValue(): string" start="67" end="70" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="isCaseSensitive" signature="isCaseSensitive(): bool" start="72" end="75" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="toUpperCase" signature="toUpperCase(): string" start="77" end="80" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="toLowerCase" signature="toLowerCase(): string" start="82" end="85" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="capitalize" signature="capitalize(): string" start="87" end="90" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="capitalizeWords" signature="capitalizeWords(): string" start="92" end="95" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="reverse" signature="reverse(): string" start="97" end="100" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="length" signature="length(): int" start="102" end="105" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="byteLength" signature="byteLength(): int" start="107" end="110" crap="2" executable="1" executed="0" coverage="0"/>
      <method name="truncate" signature="truncate(int $maxLength, string $suffix): string" start="112" end="130" crap="3" executable="11" executed="11" coverage="100"/>
      <method name="contains" signature="contains(string $needle): bool" start="132" end="146" crap="3" executable="8" executed="8" coverage="100"/>
      <method name="startsWith" signature="startsWith(string $prefix): bool" start="148" end="167" crap="4" executable="9" executed="9" coverage="100"/>
      <method name="endsWith" signature="endsWith(string $suffix): bool" start="169" end="188" crap="4" executable="9" executed="9" coverage="100"/>
      <method name="replace" signature="replace(string $search, string $replacement): string" start="190" end="201" crap="2" executable="7" executed="7" coverage="100"/>
      <method name="repeat" signature="repeat(int $times): string" start="203" end="219" crap="3" executable="10" executed="10" coverage="100"/>
      <method name="padLeft" signature="padLeft(int $length, string $padString): string" start="221" end="247" crap="4" executable="16" executed="16" coverage="100"/>
      <method name="padRight" signature="padRight(int $length, string $padString): string" start="249" end="275" crap="5.34" executable="16" executed="9" coverage="56.25"/>
      <method name="split" signature="split(string $delimiter): array" start="280" end="287" crap="2" executable="3" executed="3" coverage="100"/>
      <method name="splitLines" signature="splitLines(): array" start="292" end="297" crap="6" executable="2" executed="0" coverage="0"/>
      <method name="words" signature="words(): array" start="302" end="307" crap="2" executable="2" executed="2" coverage="100"/>
      <method name="wordCount" signature="wordCount(): int" start="309" end="312" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="reverseWords" signature="reverseWords(): string" start="314" end="320" crap="1" executable="3" executed="3" coverage="100"/>
      <method name="isNumeric" signature="isNumeric(): bool" start="322" end="325" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="isAlpha" signature="isAlpha(): bool" start="327" end="330" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="isAlphanumeric" signature="isAlphanumeric(): bool" start="332" end="335" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="trim" signature="trim(): string" start="337" end="340" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="trimLeft" signature="trimLeft(): string" start="342" end="345" crap="2" executable="1" executed="0" coverage="0"/>
      <method name="trimRight" signature="trimRight(): string" start="347" end="350" crap="2" executable="1" executed="0" coverage="0"/>
      <method name="toSlug" signature="toSlug(): string" start="352" end="359" crap="1" executable="4" executed="4" coverage="100"/>
      <method name="toCamelCase" signature="toCamelCase(): string" start="361" end="376" crap="2.01" executable="9" executed="8" coverage="88.888888888889"/>
      <method name="toSnakeCase" signature="toSnakeCase(): string" start="378" end="387" crap="1" executable="6" executed="6" coverage="100"/>
      <method name="toKebabCase" signature="toKebabCase(): string" start="389" end="398" crap="1" executable="6" executed="6" coverage="100"/>
    </class>
    <coverage>
      <line nr="41">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_can_be_instantiated"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_can_be_instantiated_case_insensitive"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_rejects_empty_string"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_rejects_too_long_string"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncate_rejects_negative_length"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeat_rejects_negative_count"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pad_left_rejects_negative_length"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pad_left_rejects_empty_pad_string"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_split_rejects_empty_delimiter"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#3"/>
      </line>
      <line nr="43">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_can_be_instantiated"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_can_be_instantiated_case_insensitive"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_rejects_empty_string"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_rejects_too_long_string"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncate_rejects_negative_length"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeat_rejects_negative_count"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pad_left_rejects_negative_length"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pad_left_rejects_empty_pad_string"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_split_rejects_empty_delimiter"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#3"/>
      </line>
      <line nr="44">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_rejects_empty_string"/>
      </line>
      <line nr="45">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_rejects_empty_string"/>
      </line>
      <line nr="46">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_rejects_empty_string"/>
      </line>
      <line nr="47">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_rejects_empty_string"/>
      </line>
      <line nr="48">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_rejects_empty_string"/>
      </line>
      <line nr="53">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_can_be_instantiated"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_can_be_instantiated_case_insensitive"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_rejects_too_long_string"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncate_rejects_negative_length"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeat_rejects_negative_count"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pad_left_rejects_negative_length"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pad_left_rejects_empty_pad_string"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_split_rejects_empty_delimiter"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#3"/>
      </line>
      <line nr="54">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_rejects_too_long_string"/>
      </line>
      <line nr="55">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_rejects_too_long_string"/>
      </line>
      <line nr="56">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_rejects_too_long_string"/>
      </line>
      <line nr="57">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_rejects_too_long_string"/>
      </line>
      <line nr="58">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_rejects_too_long_string"/>
      </line>
      <line nr="63">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_can_be_instantiated"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_can_be_instantiated_case_insensitive"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncate_rejects_negative_length"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeat_rejects_negative_count"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pad_left_rejects_negative_length"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pad_left_rejects_empty_pad_string"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_split_rejects_empty_delimiter"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#3"/>
      </line>
      <line nr="64">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_can_be_instantiated"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_can_be_instantiated_case_insensitive"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncate_rejects_negative_length"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeat_rejects_negative_count"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pad_left_rejects_negative_length"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pad_left_rejects_empty_pad_string"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_split_rejects_empty_delimiter"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#3"/>
      </line>
      <line nr="69">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_can_be_instantiated"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_can_be_instantiated_case_insensitive"/>
      </line>
      <line nr="74">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_can_be_instantiated"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_can_be_instantiated_case_insensitive"/>
      </line>
      <line nr="79">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_uppercase#4"/>
      </line>
      <line nr="84">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_lowercase#4"/>
      </line>
      <line nr="89">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_first_letter#3"/>
      </line>
      <line nr="94">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_capitalizes_all_words#3"/>
      </line>
      <line nr="99">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_string#3"/>
      </line>
      <line nr="104">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_calculates_length#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#4"/>
      </line>
      <line nr="114">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncate_rejects_negative_length"/>
      </line>
      <line nr="115">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncate_rejects_negative_length"/>
      </line>
      <line nr="116">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncate_rejects_negative_length"/>
      </line>
      <line nr="117">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncate_rejects_negative_length"/>
      </line>
      <line nr="118">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncate_rejects_negative_length"/>
      </line>
      <line nr="123">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#5"/>
      </line>
      <line nr="124">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#5"/>
      </line>
      <line nr="127">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#4"/>
      </line>
      <line nr="129">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncates_string#4"/>
      </line>
      <line nr="134">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#5"/>
      </line>
      <line nr="135">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#4"/>
      </line>
      <line nr="138">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#5"/>
      </line>
      <line nr="139">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#5"/>
      </line>
      <line nr="142">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#2"/>
      </line>
      <line nr="143">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#2"/>
      </line>
      <line nr="144">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#2"/>
      </line>
      <line nr="150">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#5"/>
      </line>
      <line nr="151">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#4"/>
      </line>
      <line nr="154">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#5"/>
      </line>
      <line nr="156">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#5"/>
      </line>
      <line nr="157">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#5"/>
      </line>
      <line nr="160">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#3"/>
      </line>
      <line nr="162">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#3"/>
      </line>
      <line nr="163">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#3"/>
      </line>
      <line nr="166">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_starts_with#2"/>
      </line>
      <line nr="171">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#5"/>
      </line>
      <line nr="172">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#4"/>
      </line>
      <line nr="175">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#5"/>
      </line>
      <line nr="177">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#5"/>
      </line>
      <line nr="178">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#5"/>
      </line>
      <line nr="181">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#3"/>
      </line>
      <line nr="183">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#3"/>
      </line>
      <line nr="184">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#3"/>
      </line>
      <line nr="187">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_ends_with#2"/>
      </line>
      <line nr="192">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#4"/>
      </line>
      <line nr="193">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#4"/>
      </line>
      <line nr="196">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#2"/>
      </line>
      <line nr="197">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#2"/>
      </line>
      <line nr="198">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#2"/>
      </line>
      <line nr="199">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#2"/>
      </line>
      <line nr="200">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_replaces_substring#2"/>
      </line>
      <line nr="205">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeat_rejects_negative_count"/>
      </line>
      <line nr="206">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeat_rejects_negative_count"/>
      </line>
      <line nr="207">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeat_rejects_negative_count"/>
      </line>
      <line nr="208">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeat_rejects_negative_count"/>
      </line>
      <line nr="209">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeat_rejects_negative_count"/>
      </line>
      <line nr="214">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#4"/>
      </line>
      <line nr="215">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#0"/>
      </line>
      <line nr="218">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeats_string#4"/>
      </line>
      <line nr="223">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pad_left_rejects_negative_length"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pad_left_rejects_empty_pad_string"/>
      </line>
      <line nr="224">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pad_left_rejects_negative_length"/>
      </line>
      <line nr="225">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pad_left_rejects_negative_length"/>
      </line>
      <line nr="226">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pad_left_rejects_negative_length"/>
      </line>
      <line nr="227">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pad_left_rejects_negative_length"/>
      </line>
      <line nr="232">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pad_left_rejects_empty_pad_string"/>
      </line>
      <line nr="233">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pad_left_rejects_empty_pad_string"/>
      </line>
      <line nr="236">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#4"/>
      </line>
      <line nr="238">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#4"/>
      </line>
      <line nr="239">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#2"/>
      </line>
      <line nr="242">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#4"/>
      </line>
      <line nr="243">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#4"/>
      </line>
      <line nr="244">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#4"/>
      </line>
      <line nr="246">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_left#4"/>
      </line>
      <line nr="251">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#4"/>
      </line>
      <line nr="260">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#4"/>
      </line>
      <line nr="264">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#4"/>
      </line>
      <line nr="266">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#4"/>
      </line>
      <line nr="267">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#2"/>
      </line>
      <line nr="270">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#4"/>
      </line>
      <line nr="271">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#4"/>
      </line>
      <line nr="272">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#4"/>
      </line>
      <line nr="274">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pads_right#4"/>
      </line>
      <line nr="282">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_split_rejects_empty_delimiter"/>
      </line>
      <line nr="283">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_split_rejects_empty_delimiter"/>
      </line>
      <line nr="286">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_splits_string#3"/>
      </line>
      <line nr="304">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#3"/>
      </line>
      <line nr="306">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_extracts_words#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#3"/>
      </line>
      <line nr="311">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_counts_words#3"/>
      </line>
      <line nr="316">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#2"/>
      </line>
      <line nr="317">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#2"/>
      </line>
      <line nr="319">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_reverses_words#2"/>
      </line>
      <line nr="324">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_numeric#5"/>
      </line>
      <line nr="329">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alpha#5"/>
      </line>
      <line nr="334">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_is_alphanumeric#5"/>
      </line>
      <line nr="339">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_trims_whitespace#4"/>
      </line>
      <line nr="354">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#4"/>
      </line>
      <line nr="355">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#4"/>
      </line>
      <line nr="356">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#4"/>
      </line>
      <line nr="358">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_slug#4"/>
      </line>
      <line nr="363">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#3"/>
      </line>
      <line nr="365">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#3"/>
      </line>
      <line nr="369">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#3"/>
      </line>
      <line nr="370">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#3"/>
      </line>
      <line nr="371">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#3"/>
      </line>
      <line nr="372">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#3"/>
      </line>
      <line nr="375">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#3"/>
      </line>
      <line nr="380">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#3"/>
      </line>
      <line nr="381">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#3"/>
      </line>
      <line nr="382">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#3"/>
      </line>
      <line nr="383">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#3"/>
      </line>
      <line nr="386">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#3"/>
      </line>
      <line nr="391">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#3"/>
      </line>
      <line nr="392">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#3"/>
      </line>
      <line nr="393">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#3"/>
      </line>
      <line nr="394">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#3"/>
      </line>
      <line nr="397">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#3"/>
      </line>
      <line nr="50">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_rejects_empty_string"/>
      </line>
      <line nr="49">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_rejects_empty_string"/>
      </line>
      <line nr="60">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_rejects_too_long_string"/>
      </line>
      <line nr="59">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_rejects_too_long_string"/>
      </line>
      <line nr="120">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncate_rejects_negative_length"/>
      </line>
      <line nr="119">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_truncate_rejects_negative_length"/>
      </line>
      <line nr="145">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_checks_contains#2"/>
      </line>
      <line nr="211">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeat_rejects_negative_count"/>
      </line>
      <line nr="210">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_repeat_rejects_negative_count"/>
      </line>
      <line nr="229">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pad_left_rejects_negative_length"/>
      </line>
      <line nr="228">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_pad_left_rejects_negative_length"/>
      </line>
      <line nr="373">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_camel_case#3"/>
      </line>
      <line nr="384">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_snake_case#3"/>
      </line>
      <line nr="395">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\StringProcessor\StringProcessor48Test::test_converts_to_kebab_case#3"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_DECLARE">declare</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strict_types</token>
        <token name="T_EQUAL">=</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4"/>
      <line no="5">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Infection\BenchmarkSource\AutoGenerated\StringProcessor</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="6"/>
      <line no="7">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">InvalidArgumentException</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="8">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_filter</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="9">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_map</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="10">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_reverse</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="11">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="12">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">explode</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="13">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="14">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strlen</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="15">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strtolower</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="16">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strtoupper</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="17">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_substr</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="18">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">preg_match</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="19">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">preg_replace</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="20">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="21">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_contains</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="22">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_repeat</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="23">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_replace</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="24">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strlen</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="25">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strrev</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="26">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">substr</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="27">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">trim</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="28">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ucfirst</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="29">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ucwords</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="30"/>
      <line no="31">
        <token name="T_FINAL">final</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">StringProcessor48</token>
      </line>
      <line no="32">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="33">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MIN_LENGTH</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="34">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONST">const</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">MAX_LENGTH</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">10000</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="35"/>
      <line no="36">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="37">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$caseSensitive</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="38"/>
      <line no="39">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">__construct</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$caseSensitive</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="40">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="41">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$length</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="42"/>
      <line no="43">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$length</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">MIN_LENGTH</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="44">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">InvalidArgumentException</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="45">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="46">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'String length must be at least %d characters, got %d.'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="47">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">MIN_LENGTH</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="48">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$length</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="49">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="50">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="51">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="52"/>
      <line no="53">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$length</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">MAX_LENGTH</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="54">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">InvalidArgumentException</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="55">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="56">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'String length must not exceed %d characters, got %d.'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="57">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_STRING">self</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">MAX_LENGTH</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$length</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="59">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="60">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="62"/>
      <line no="63">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="64">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">caseSensitive</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$caseSensitive</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="66"/>
      <line no="67">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getValue</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="68">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="69">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="70">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="71"/>
      <line no="72">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">isCaseSensitive</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="73">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="74">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">caseSensitive</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="76"/>
      <line no="77">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">toUpperCase</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="78">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="79">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strtoupper</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="80">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="81"/>
      <line no="82">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">toLowerCase</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="83">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="84">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strtolower</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="85">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="86"/>
      <line no="87">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">capitalize</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="88">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="89">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ucfirst</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">mb_strtolower</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="90">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="91"/>
      <line no="92">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">capitalizeWords</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="93">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ucwords</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">mb_strtolower</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="95">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="96"/>
      <line no="97">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">reverse</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="98">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="99">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strrev</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="100">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="101"/>
      <line no="102">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">length</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
      </line>
      <line no="103">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="104">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="105">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="106"/>
      <line no="107">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">byteLength</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
      </line>
      <line no="108">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="109">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="110">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="111"/>
      <line no="112">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">truncate</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$maxLength</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$suffix</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'...'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="113">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="114">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$maxLength</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="115">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">InvalidArgumentException</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="116">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="117">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Max length must be non-negative, got %d.'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="118">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$maxLength</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="119">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="120">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="121">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="122"/>
      <line no="123">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">length</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_SMALLER_OR_EQUAL">&lt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$maxLength</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="124">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="125">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="126"/>
      <line no="127">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$truncated</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$maxLength</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="128"/>
      <line no="129">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$truncated</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$suffix</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="130">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="131"/>
      <line no="132">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">contains</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$needle</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="133">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="134">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$needle</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="135">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="136">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="137"/>
      <line no="138">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">caseSensitive</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="139">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_contains</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$needle</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="140">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="141"/>
      <line no="142">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_contains</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="143">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">mb_strtolower</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="144">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">mb_strtolower</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$needle</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="145">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="146">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="147"/>
      <line no="148">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">startsWith</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$prefix</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="149">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="150">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$prefix</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="151">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="152">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="153"/>
      <line no="154">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$prefixLength</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$prefix</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="155"/>
      <line no="156">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$prefixLength</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">length</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="157">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="158">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="159"/>
      <line no="160">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$start</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$prefixLength</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="161"/>
      <line no="162">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">caseSensitive</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="163">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$start</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$prefix</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="164">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="165"/>
      <line no="166">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strtolower</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$start</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strtolower</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$prefix</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="167">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="168"/>
      <line no="169">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">endsWith</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$suffix</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="170">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="171">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$suffix</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="172">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="173">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="174"/>
      <line no="175">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$suffixLength</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$suffix</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="176"/>
      <line no="177">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$suffixLength</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">length</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="178">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="179">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="180"/>
      <line no="181">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$end</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_VARIABLE">$suffixLength</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="182"/>
      <line no="183">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">caseSensitive</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="184">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$end</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$suffix</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="185">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="186"/>
      <line no="187">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strtolower</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$end</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strtolower</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$suffix</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="188">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="189"/>
      <line no="190">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">replace</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$search</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$replacement</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="191">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="192">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">caseSensitive</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="193">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_replace</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$search</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$replacement</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="194">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="195"/>
      <line no="196">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">preg_replace</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="197">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/'</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">preg_quote</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$search</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/i'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="198">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$replacement</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="199">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="200">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="201">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="202"/>
      <line no="203">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">repeat</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$times</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="204">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="205">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$times</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="206">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">InvalidArgumentException</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="207">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="208">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Repetition count must be non-negative, got %d.'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="209">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$times</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="210">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="211">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="212">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="213"/>
      <line no="214">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$times</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="215">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="216">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="217"/>
      <line no="218">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_repeat</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$times</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="219">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="220"/>
      <line no="221">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">padLeft</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$length</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$padString</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' '</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="222">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="223">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$length</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="224">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">InvalidArgumentException</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="225">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="226">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Pad length must be non-negative, got %d.'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="227">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$length</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="228">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="229">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="230">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="231"/>
      <line no="232">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$padString</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="233">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">InvalidArgumentException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Pad string cannot be empty.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="234">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="235"/>
      <line no="236">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$currentLength</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">length</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="237"/>
      <line no="238">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$currentLength</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_GREATER_OR_EQUAL">&gt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$length</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="239">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="240">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="241"/>
      <line no="242">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$padLength</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$length</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$currentLength</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="243">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$padding</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_repeat</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$padString</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_INT_CAST">(int)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$padLength</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DIV">/</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$padString</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS">+</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="244">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$padding</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$padding</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$padLength</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="245"/>
      <line no="246">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$padding</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="247">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="248"/>
      <line no="249">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">padRight</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$length</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$padString</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' '</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="250">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="251">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$length</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="252">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">InvalidArgumentException</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="253">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="254">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Pad length must be non-negative, got %d.'</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="255">
        <token name="T_WHITESPACE">                    </token>
        <token name="T_VARIABLE">$length</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="256">
        <token name="T_WHITESPACE">                </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="257">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="258">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="259"/>
      <line no="260">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$padString</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="261">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">InvalidArgumentException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Pad string cannot be empty.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="262">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="263"/>
      <line no="264">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$currentLength</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">length</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="265"/>
      <line no="266">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$currentLength</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_GREATER_OR_EQUAL">&gt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$length</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="267">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="268">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="269"/>
      <line no="270">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$padLength</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$length</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_MINUS">-</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$currentLength</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="271">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$padding</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_repeat</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$padString</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_INT_CAST">(int)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$padLength</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DIV">/</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$padString</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_PLUS">+</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="272">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$padding</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_substr</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$padding</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$padLength</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="273"/>
      <line no="274">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$padding</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="275">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="276"/>
      <line no="277">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="278">
        <token name="T_DOC_COMMENT">     * @return list&lt;string&gt;</token>
      </line>
      <line no="279">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="280">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">split</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$delimiter</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="281">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="282">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$delimiter</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="283">
        <token name="T_WHITESPACE">            </token>
        <token name="T_THROW">throw</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NEW">new</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">InvalidArgumentException</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Delimiter cannot be empty.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="284">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="285"/>
      <line no="286">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">explode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$delimiter</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="287">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="288"/>
      <line no="289">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="290">
        <token name="T_DOC_COMMENT">     * @return list&lt;string&gt;</token>
      </line>
      <line no="291">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="292">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">splitLines</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="293">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="294">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">preg_split</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/\r\n|\r|\n/'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="295"/>
      <line no="296">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_values</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$lines</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="297">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="298"/>
      <line no="299">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="300">
        <token name="T_DOC_COMMENT">     * @return list&lt;string&gt;</token>
      </line>
      <line no="301">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="302">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">words</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="303">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="304">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$words</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">preg_split</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/\s+/'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">trim</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_QUESTION_MARK">?</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="305"/>
      <line no="306">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_values</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">array_filter</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$words</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FN">fn</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$word</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$word</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="307">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="308"/>
      <line no="309">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">wordCount</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
      </line>
      <line no="310">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="311">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">words</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="312">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="313"/>
      <line no="314">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">reverseWords</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="315">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="316">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$words</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">words</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="317">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$reversed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_reverse</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$words</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="318"/>
      <line no="319">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">' '</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$reversed</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="320">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="321"/>
      <line no="322">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">isNumeric</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="323">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="324">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">preg_match</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/^-?\d+(\.\d+)?$/'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="325">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="326"/>
      <line no="327">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">isAlpha</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="328">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="329">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">preg_match</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/^[a-zA-Z]+$/'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="330">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="331"/>
      <line no="332">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">isAlphanumeric</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="333">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="334">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">preg_match</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/^[a-zA-Z0-9]+$/'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="335">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="336"/>
      <line no="337">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">trim</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="338">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="339">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">trim</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="340">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="341"/>
      <line no="342">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">trimLeft</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="343">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="344">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ltrim</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="345">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="346"/>
      <line no="347">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">trimRight</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="348">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="349">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">rtrim</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="350">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="351"/>
      <line no="352">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">toSlug</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="353">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="354">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$slug</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strtolower</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="355">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$slug</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">preg_replace</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/[^a-z0-9]+/'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'-'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$slug</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$slug</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="356">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$slug</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">trim</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$slug</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'-'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="357"/>
      <line no="358">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$slug</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="359">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="360"/>
      <line no="361">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">toCamelCase</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="362">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="363">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$words</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">words</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="364"/>
      <line no="365">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$words</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="366">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="367">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="368"/>
      <line no="369">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$first</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strtolower</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$words</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_LNUMBER">0</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="370">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$rest</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_map</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="371">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FN">fn</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$word</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">ucfirst</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">mb_strtolower</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$word</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="372">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STRING">array_slice</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$words</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="373">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="374"/>
      <line no="375">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$first</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOT">.</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$rest</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="376">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="377"/>
      <line no="378">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">toSnakeCase</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="379">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="380">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$words</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">words</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="381">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$lowercased</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_map</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="382">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FN">fn</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$word</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strtolower</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$word</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="383">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$words</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="384">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="385"/>
      <line no="386">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'_'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$lowercased</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="387">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="388"/>
      <line no="389">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">toKebabCase</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
      </line>
      <line no="390">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="391">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$words</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">words</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="392">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$lowercased</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_map</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="393">
        <token name="T_WHITESPACE">            </token>
        <token name="T_STATIC">static</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FN">fn</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$word</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strtolower</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$word</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="394">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$words</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="395">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="396"/>
      <line no="397">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">implode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'-'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$lowercased</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="398">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="399">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="400"/>
    </source>
  </file>
</phpunit>
