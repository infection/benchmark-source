<?xml version="1.0"?>
<phpunit xmlns="https://schema.phpunit.de/coverage/1.0">
  <file name="Validator44.php" path="/AutoGenerated/Validator">
    <totals>
      <lines total="644" comments="19" code="625" executable="247" executed="225" percent="91.09"/>
      <methods count="43" tested="34" percent="79.07"/>
      <functions count="0" tested="0" percent="0"/>
      <classes count="1" tested="0" percent="0.00"/>
      <traits count="0" tested="0" percent="0"/>
    </totals>
    <class name="Infection\BenchmarkSource\AutoGenerated\Validator\Validator44" start="22" executable="247" executed="225" crap="117.4">
      <namespace name="Infection\BenchmarkSource\AutoGenerated\Validator"/>
      <method name="getErrors" signature="getErrors(): array" start="32" end="35" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="hasErrors" signature="hasErrors(): bool" start="37" end="40" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="clearErrors" signature="clearErrors(): void" start="42" end="45" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="addError" signature="addError(string $field, string $message): void" start="47" end="50" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="validateRequired" signature="validateRequired(string $field, mixed $value): bool" start="52" end="61" crap="4" executable="4" executed="4" coverage="100"/>
      <method name="validateString" signature="validateString(string $field, mixed $value): bool" start="63" end="72" crap="2" executable="4" executed="4" coverage="100"/>
      <method name="validateInteger" signature="validateInteger(string $field, mixed $value): bool" start="74" end="83" crap="2" executable="4" executed="4" coverage="100"/>
      <method name="validateFloat" signature="validateFloat(string $field, mixed $value): bool" start="85" end="94" crap="2" executable="4" executed="4" coverage="100"/>
      <method name="validateNumeric" signature="validateNumeric(string $field, mixed $value): bool" start="96" end="105" crap="2" executable="4" executed="4" coverage="100"/>
      <method name="validateBoolean" signature="validateBoolean(string $field, mixed $value): bool" start="107" end="116" crap="2" executable="4" executed="4" coverage="100"/>
      <method name="validateArray" signature="validateArray(string $field, mixed $value): bool" start="118" end="127" crap="2" executable="4" executed="4" coverage="100"/>
      <method name="validateEmail" signature="validateEmail(string $field, mixed $value): bool" start="129" end="144" crap="3" executable="7" executed="7" coverage="100"/>
      <method name="validateUrl" signature="validateUrl(string $field, mixed $value): bool" start="146" end="161" crap="3" executable="7" executed="7" coverage="100"/>
      <method name="validateMinLength" signature="validateMinLength(string $field, mixed $value, int $min): bool" start="163" end="183" crap="3" executable="11" executed="11" coverage="100"/>
      <method name="validateMaxLength" signature="validateMaxLength(string $field, mixed $value, int $max): bool" start="185" end="205" crap="3.05" executable="11" executed="9" coverage="81.818181818182"/>
      <method name="validateLength" signature="validateLength(string $field, mixed $value, int $min, int $max): bool" start="207" end="211" crap="2" executable="2" executed="2" coverage="100"/>
      <method name="validateMin" signature="validateMin(string $field, mixed $value, int|float $min): bool" start="213" end="231" crap="3" executable="10" executed="10" coverage="100"/>
      <method name="validateMax" signature="validateMax(string $field, mixed $value, int|float $max): bool" start="233" end="251" crap="3.07" executable="10" executed="8" coverage="80"/>
      <method name="validateRange" signature="validateRange(string $field, mixed $value, int|float $min, int|float $max): bool" start="253" end="257" crap="2" executable="2" executed="2" coverage="100"/>
      <method name="validatePattern" signature="validatePattern(string $field, mixed $value, string $pattern): bool" start="259" end="274" crap="3" executable="7" executed="7" coverage="100"/>
      <method name="validateAlpha" signature="validateAlpha(string $field, mixed $value): bool" start="276" end="279" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="validateAlphanumeric" signature="validateAlphanumeric(string $field, mixed $value): bool" start="281" end="284" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="validateAlphaDash" signature="validateAlphaDash(string $field, mixed $value): bool" start="286" end="289" crap="1" executable="1" executed="1" coverage="100"/>
      <method name="validateIn" signature="validateIn(string $field, mixed $value, array $allowedValues): bool" start="294" end="303" crap="2" executable="4" executed="4" coverage="100"/>
      <method name="validateNotIn" signature="validateNotIn(string $field, mixed $value, array $disallowedValues): bool" start="308" end="317" crap="2" executable="4" executed="4" coverage="100"/>
      <method name="validateEquals" signature="validateEquals(string $field, mixed $value, mixed $expected): bool" start="319" end="328" crap="2" executable="4" executed="4" coverage="100"/>
      <method name="validateNotEquals" signature="validateNotEquals(string $field, mixed $value, mixed $notExpected): bool" start="330" end="339" crap="2" executable="4" executed="4" coverage="100"/>
      <method name="validateContains" signature="validateContains(string $field, mixed $value, string $needle): bool" start="341" end="356" crap="3" executable="7" executed="7" coverage="100"/>
      <method name="validateStartsWith" signature="validateStartsWith(string $field, mixed $value, string $prefix): bool" start="358" end="373" crap="3.21" executable="7" executed="5" coverage="71.428571428571"/>
      <method name="validateEndsWith" signature="validateEndsWith(string $field, mixed $value, string $suffix): bool" start="375" end="390" crap="3.21" executable="7" executed="5" coverage="71.428571428571"/>
      <method name="validateArrayMinCount" signature="validateArrayMinCount(string $field, mixed $value, int $min): bool" start="392" end="412" crap="3" executable="11" executed="11" coverage="100"/>
      <method name="validateArrayMaxCount" signature="validateArrayMaxCount(string $field, mixed $value, int $max): bool" start="414" end="434" crap="3.05" executable="11" executed="9" coverage="81.818181818182"/>
      <method name="validateArrayCount" signature="validateArrayCount(string $field, mixed $value, int $min, int $max): bool" start="436" end="440" crap="2" executable="2" executed="2" coverage="100"/>
      <method name="validateArrayHasKeys" signature="validateArrayHasKeys(string $field, mixed $value, array $requiredKeys): bool" start="445" end="463" crap="4" executable="9" executed="9" coverage="100"/>
      <method name="validateDate" signature="validateDate(string $field, mixed $value, string $format): bool" start="465" end="482" crap="4" executable="8" executed="8" coverage="100"/>
      <method name="validateDateBefore" signature="validateDateBefore(string $field, mixed $value, string $before): bool" start="484" end="508" crap="5.93" executable="12" executed="8" coverage="66.666666666667"/>
      <method name="validateDateAfter" signature="validateDateAfter(string $field, mixed $value, string $after): bool" start="510" end="534" crap="5.93" executable="12" executed="8" coverage="66.666666666667"/>
      <method name="validateIpAddress" signature="validateIpAddress(string $field, mixed $value): bool" start="536" end="551" crap="3" executable="7" executed="7" coverage="100"/>
      <method name="validateIpv4" signature="validateIpv4(string $field, mixed $value): bool" start="553" end="568" crap="3.21" executable="7" executed="5" coverage="71.428571428571"/>
      <method name="validateIpv6" signature="validateIpv6(string $field, mixed $value): bool" start="570" end="585" crap="3.21" executable="7" executed="5" coverage="71.428571428571"/>
      <method name="validateJson" signature="validateJson(string $field, mixed $value): bool" start="587" end="604" crap="3" executable="8" executed="8" coverage="100"/>
      <method name="validateUuid" signature="validateUuid(string $field, mixed $value): bool" start="606" end="623" crap="3" executable="8" executed="8" coverage="100"/>
      <method name="validateAll" signature="validateAll(array $data, array $rules): bool" start="629" end="642" crap="3" executable="6" executed="6" coverage="100"/>
    </class>
    <coverage>
      <line nr="34">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_starts_with_no_errors"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_can_clear_errors"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all_with_errors"/>
      </line>
      <line nr="39">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_starts_with_no_errors"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_can_clear_errors"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all_with_errors"/>
      </line>
      <line nr="44">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_can_clear_errors"/>
      </line>
      <line nr="49">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_can_clear_errors"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_string#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_integer#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_integer#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_float#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_float#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_numeric#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_numeric#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_boolean#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_boolean#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_boolean#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_length"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_range"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_pattern#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_pattern#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_in#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_in#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_in#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_in#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_equals#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_equals#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_equals#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_equals#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_contains#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_contains#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_starts_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ends_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_max_count#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_count"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_has_keys#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_has_keys#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_before#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_before#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_after#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_after#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#6"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv4#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv4#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv6#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv6#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all_with_errors"/>
      </line>
      <line nr="54">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_can_clear_errors"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#5"/>
      </line>
      <line nr="55">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_can_clear_errors"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#5"/>
      </line>
      <line nr="57">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_can_clear_errors"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#5"/>
      </line>
      <line nr="60">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_required#2"/>
      </line>
      <line nr="65">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_string#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all_with_errors"/>
      </line>
      <line nr="66">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_string#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all_with_errors"/>
      </line>
      <line nr="68">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_string#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_string#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_string#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all_with_errors"/>
      </line>
      <line nr="71">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_string#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_string#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all"/>
      </line>
      <line nr="76">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_integer#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_integer#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_integer#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_integer#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_integer#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all_with_errors"/>
      </line>
      <line nr="77">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_integer#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_integer#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all_with_errors"/>
      </line>
      <line nr="79">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_integer#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_integer#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all_with_errors"/>
      </line>
      <line nr="82">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_integer#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_integer#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_integer#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all"/>
      </line>
      <line nr="87">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_float#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_float#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_float#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_float#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_float#4"/>
      </line>
      <line nr="88">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_float#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_float#4"/>
      </line>
      <line nr="90">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_float#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_float#4"/>
      </line>
      <line nr="93">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_float#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_float#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_float#2"/>
      </line>
      <line nr="98">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_numeric#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_numeric#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_numeric#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_numeric#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_numeric#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_numeric#5"/>
      </line>
      <line nr="99">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_numeric#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_numeric#5"/>
      </line>
      <line nr="101">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_numeric#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_numeric#5"/>
      </line>
      <line nr="104">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_numeric#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_numeric#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_numeric#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_numeric#3"/>
      </line>
      <line nr="109">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_boolean#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_boolean#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_boolean#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_boolean#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_boolean#4"/>
      </line>
      <line nr="110">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_boolean#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_boolean#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_boolean#4"/>
      </line>
      <line nr="112">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_boolean#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_boolean#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_boolean#4"/>
      </line>
      <line nr="115">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_boolean#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_boolean#1"/>
      </line>
      <line nr="120">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array#4"/>
      </line>
      <line nr="121">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array#4"/>
      </line>
      <line nr="123">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array#4"/>
      </line>
      <line nr="126">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array#2"/>
      </line>
      <line nr="131">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all_with_errors"/>
      </line>
      <line nr="132">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#5"/>
      </line>
      <line nr="134">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#5"/>
      </line>
      <line nr="137">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all_with_errors"/>
      </line>
      <line nr="138">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all_with_errors"/>
      </line>
      <line nr="140">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all_with_errors"/>
      </line>
      <line nr="143">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_email#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all"/>
      </line>
      <line nr="148">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#5"/>
      </line>
      <line nr="149">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#5"/>
      </line>
      <line nr="151">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#5"/>
      </line>
      <line nr="154">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#4"/>
      </line>
      <line nr="155">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#4"/>
      </line>
      <line nr="157">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#4"/>
      </line>
      <line nr="160">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_url#2"/>
      </line>
      <line nr="165">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_length"/>
      </line>
      <line nr="166">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#4"/>
      </line>
      <line nr="168">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#4"/>
      </line>
      <line nr="171">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_length"/>
      </line>
      <line nr="173">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_length"/>
      </line>
      <line nr="174">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_length"/>
      </line>
      <line nr="175">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_length"/>
      </line>
      <line nr="176">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_length"/>
      </line>
      <line nr="179">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_length"/>
      </line>
      <line nr="182">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_length"/>
      </line>
      <line nr="187">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max_length#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max_length#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max_length#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_length"/>
      </line>
      <line nr="193">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max_length#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max_length#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max_length#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_length"/>
      </line>
      <line nr="195">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max_length#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max_length#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max_length#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_length"/>
      </line>
      <line nr="196">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_length"/>
      </line>
      <line nr="197">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_length"/>
      </line>
      <line nr="198">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_length"/>
      </line>
      <line nr="201">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_length"/>
      </line>
      <line nr="204">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max_length#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max_length#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max_length#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_length"/>
      </line>
      <line nr="209">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_length"/>
      </line>
      <line nr="210">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_length"/>
      </line>
      <line nr="215">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_range"/>
      </line>
      <line nr="216">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min#4"/>
      </line>
      <line nr="218">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min#4"/>
      </line>
      <line nr="221">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_range"/>
      </line>
      <line nr="222">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_range"/>
      </line>
      <line nr="223">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_range"/>
      </line>
      <line nr="224">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_range"/>
      </line>
      <line nr="227">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_range"/>
      </line>
      <line nr="230">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_range"/>
      </line>
      <line nr="235">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_range"/>
      </line>
      <line nr="241">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_range"/>
      </line>
      <line nr="242">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_range"/>
      </line>
      <line nr="243">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_range"/>
      </line>
      <line nr="244">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_range"/>
      </line>
      <line nr="247">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_range"/>
      </line>
      <line nr="250">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_range"/>
      </line>
      <line nr="255">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_range"/>
      </line>
      <line nr="256">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_range"/>
      </line>
      <line nr="261">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_pattern#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_pattern#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_pattern#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_pattern#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#5"/>
      </line>
      <line nr="262">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_pattern#3"/>
      </line>
      <line nr="264">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_pattern#3"/>
      </line>
      <line nr="267">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_pattern#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_pattern#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_pattern#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#5"/>
      </line>
      <line nr="268">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_pattern#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#5"/>
      </line>
      <line nr="270">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_pattern#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#5"/>
      </line>
      <line nr="273">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_pattern#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_pattern#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#3"/>
      </line>
      <line nr="278">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha#4"/>
      </line>
      <line nr="283">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alphanumeric#4"/>
      </line>
      <line nr="288">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_alpha_dash#5"/>
      </line>
      <line nr="296">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_in#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_in#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_in#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_in#3"/>
      </line>
      <line nr="297">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_in#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_in#3"/>
      </line>
      <line nr="299">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_in#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_in#3"/>
      </line>
      <line nr="302">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_in#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_in#2"/>
      </line>
      <line nr="310">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_in#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_in#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_in#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_in#3"/>
      </line>
      <line nr="311">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_in#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_in#3"/>
      </line>
      <line nr="313">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_in#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_in#3"/>
      </line>
      <line nr="316">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_in#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_in#2"/>
      </line>
      <line nr="321">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_equals#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_equals#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_equals#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_equals#3"/>
      </line>
      <line nr="322">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_equals#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_equals#3"/>
      </line>
      <line nr="324">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_equals#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_equals#3"/>
      </line>
      <line nr="327">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_equals#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_equals#2"/>
      </line>
      <line nr="332">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_equals#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_equals#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_equals#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_equals#3"/>
      </line>
      <line nr="333">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_equals#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_equals#3"/>
      </line>
      <line nr="335">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_equals#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_equals#3"/>
      </line>
      <line nr="338">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_equals#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_not_equals#2"/>
      </line>
      <line nr="343">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_contains#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_contains#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_contains#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_contains#3"/>
      </line>
      <line nr="344">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_contains#3"/>
      </line>
      <line nr="346">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_contains#3"/>
      </line>
      <line nr="349">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_contains#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_contains#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_contains#2"/>
      </line>
      <line nr="350">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_contains#1"/>
      </line>
      <line nr="352">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_contains#1"/>
      </line>
      <line nr="355">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_contains#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_contains#2"/>
      </line>
      <line nr="360">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_starts_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_starts_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_starts_with#2"/>
      </line>
      <line nr="366">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_starts_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_starts_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_starts_with#2"/>
      </line>
      <line nr="367">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_starts_with#1"/>
      </line>
      <line nr="369">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_starts_with#1"/>
      </line>
      <line nr="372">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_starts_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_starts_with#2"/>
      </line>
      <line nr="377">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ends_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ends_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ends_with#2"/>
      </line>
      <line nr="383">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ends_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ends_with#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ends_with#2"/>
      </line>
      <line nr="384">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ends_with#1"/>
      </line>
      <line nr="386">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ends_with#1"/>
      </line>
      <line nr="389">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ends_with#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ends_with#2"/>
      </line>
      <line nr="394">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_count"/>
      </line>
      <line nr="395">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#4"/>
      </line>
      <line nr="397">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#4"/>
      </line>
      <line nr="400">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_count"/>
      </line>
      <line nr="402">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_count"/>
      </line>
      <line nr="403">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_count"/>
      </line>
      <line nr="404">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_count"/>
      </line>
      <line nr="405">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_count"/>
      </line>
      <line nr="408">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_count"/>
      </line>
      <line nr="411">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_count"/>
      </line>
      <line nr="416">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_max_count#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_max_count#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_max_count#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_count"/>
      </line>
      <line nr="422">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_max_count#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_max_count#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_max_count#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_count"/>
      </line>
      <line nr="424">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_max_count#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_max_count#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_max_count#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_count"/>
      </line>
      <line nr="425">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_max_count#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_count"/>
      </line>
      <line nr="426">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_max_count#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_count"/>
      </line>
      <line nr="427">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_max_count#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_count"/>
      </line>
      <line nr="430">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_max_count#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_count"/>
      </line>
      <line nr="433">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_max_count#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_max_count#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_count"/>
      </line>
      <line nr="438">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_count"/>
      </line>
      <line nr="439">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_count"/>
      </line>
      <line nr="447">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_has_keys#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_has_keys#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_has_keys#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_has_keys#3"/>
      </line>
      <line nr="448">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_has_keys#3"/>
      </line>
      <line nr="450">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_has_keys#3"/>
      </line>
      <line nr="453">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_has_keys#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_has_keys#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_has_keys#2"/>
      </line>
      <line nr="455">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_has_keys#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_has_keys#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_has_keys#2"/>
      </line>
      <line nr="456">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_has_keys#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_has_keys#1"/>
      </line>
      <line nr="457">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_has_keys#1"/>
      </line>
      <line nr="458">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_has_keys#1"/>
      </line>
      <line nr="462">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_has_keys#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_has_keys#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_has_keys#2"/>
      </line>
      <line nr="467">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#4"/>
      </line>
      <line nr="468">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#4"/>
      </line>
      <line nr="470">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#4"/>
      </line>
      <line nr="473">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#3"/>
      </line>
      <line nr="475">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#3"/>
      </line>
      <line nr="476">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#3"/>
      </line>
      <line nr="478">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#3"/>
      </line>
      <line nr="481">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date#1"/>
      </line>
      <line nr="486">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_before#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_before#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_before#2"/>
      </line>
      <line nr="492">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_before#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_before#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_before#2"/>
      </line>
      <line nr="493">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_before#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_before#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_before#2"/>
      </line>
      <line nr="495">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_before#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_before#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_before#2"/>
      </line>
      <line nr="501">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_before#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_before#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_before#2"/>
      </line>
      <line nr="502">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_before#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_before#2"/>
      </line>
      <line nr="504">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_before#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_before#2"/>
      </line>
      <line nr="507">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_before#0"/>
      </line>
      <line nr="512">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_after#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_after#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_after#2"/>
      </line>
      <line nr="518">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_after#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_after#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_after#2"/>
      </line>
      <line nr="519">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_after#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_after#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_after#2"/>
      </line>
      <line nr="521">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_after#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_after#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_after#2"/>
      </line>
      <line nr="527">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_after#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_after#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_after#2"/>
      </line>
      <line nr="528">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_after#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_after#2"/>
      </line>
      <line nr="530">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_after#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_after#2"/>
      </line>
      <line nr="533">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_date_after#0"/>
      </line>
      <line nr="538">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#5"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#6"/>
      </line>
      <line nr="539">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#6"/>
      </line>
      <line nr="541">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#6"/>
      </line>
      <line nr="544">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#5"/>
      </line>
      <line nr="545">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#5"/>
      </line>
      <line nr="547">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#5"/>
      </line>
      <line nr="550">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ip_address#3"/>
      </line>
      <line nr="555">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv4#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv4#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv4#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv4#3"/>
      </line>
      <line nr="561">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv4#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv4#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv4#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv4#3"/>
      </line>
      <line nr="562">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv4#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv4#3"/>
      </line>
      <line nr="564">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv4#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv4#3"/>
      </line>
      <line nr="567">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv4#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv4#1"/>
      </line>
      <line nr="572">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv6#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv6#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv6#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv6#3"/>
      </line>
      <line nr="578">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv6#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv6#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv6#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv6#3"/>
      </line>
      <line nr="579">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv6#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv6#3"/>
      </line>
      <line nr="581">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv6#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv6#3"/>
      </line>
      <line nr="584">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv6#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_ipv6#1"/>
      </line>
      <line nr="589">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#4"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#5"/>
      </line>
      <line nr="590">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#5"/>
      </line>
      <line nr="592">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#5"/>
      </line>
      <line nr="595">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#4"/>
      </line>
      <line nr="597">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#4"/>
      </line>
      <line nr="598">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#4"/>
      </line>
      <line nr="600">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#4"/>
      </line>
      <line nr="603">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_json#2"/>
      </line>
      <line nr="608">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#4"/>
      </line>
      <line nr="609">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#4"/>
      </line>
      <line nr="611">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#4"/>
      </line>
      <line nr="614">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#3"/>
      </line>
      <line nr="616">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#1"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#3"/>
      </line>
      <line nr="617">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#3"/>
      </line>
      <line nr="619">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#3"/>
      </line>
      <line nr="622">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#0"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_uuid#1"/>
      </line>
      <line nr="631">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all_with_errors"/>
      </line>
      <line nr="633">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all_with_errors"/>
      </line>
      <line nr="634">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all_with_errors"/>
      </line>
      <line nr="636">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all_with_errors"/>
      </line>
      <line nr="637">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all_with_errors"/>
      </line>
      <line nr="641">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_all_with_errors"/>
      </line>
      <line nr="177">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min_length#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_length"/>
      </line>
      <line nr="199">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max_length#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_length"/>
      </line>
      <line nr="225">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_min#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_range"/>
      </line>
      <line nr="245">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_max#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_range"/>
      </line>
      <line nr="406">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_min_count#3"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_count"/>
      </line>
      <line nr="428">
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_max_count#2"/>
        <covered by="Infection\BenchmarkSource\Test\AutoGenerated\Validator\Validator44Test::test_validates_array_count"/>
      </line>
    </coverage>
    <source>
      <line no="1">
        <token name="T_OPEN_TAG">&lt;?php</token>
      </line>
      <line no="2"/>
      <line no="3">
        <token name="T_DECLARE">declare</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">strict_types</token>
        <token name="T_EQUAL">=</token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="4"/>
      <line no="5">
        <token name="T_NAMESPACE">namespace</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_QUALIFIED">Infection\BenchmarkSource\AutoGenerated\Validator</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="6"/>
      <line no="7">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">array_key_exists</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="8">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="9">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">filter_var</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="10">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">in_array</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="11">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_array</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="12">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_bool</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="13">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_float</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="14">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_int</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="15">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_numeric</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="16">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">is_string</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="17">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strlen</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="18">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">preg_match</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="19">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="20">
        <token name="T_USE">use</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">str_contains</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="21"/>
      <line no="22">
        <token name="T_FINAL">final</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CLASS">class</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">Validator44</token>
      </line>
      <line no="23">
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="24">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="25">
        <token name="T_DOC_COMMENT">     * @var list&lt;string&gt;</token>
      </line>
      <line no="26">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="27">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$errors</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="28"/>
      <line no="29">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="30">
        <token name="T_DOC_COMMENT">     * @return list&lt;string&gt;</token>
      </line>
      <line no="31">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="32">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">getErrors</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
      </line>
      <line no="33">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="34">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">errors</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="35">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="36"/>
      <line no="37">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">hasErrors</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="38">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="39">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">errors</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">0</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="40">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="41"/>
      <line no="42">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">clearErrors</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="43">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="44">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">errors</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="45">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="46"/>
      <line no="47">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PRIVATE">private</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">void</token>
      </line>
      <line no="48">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="49">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">errors</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'%s: %s'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$message</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="50">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="51"/>
      <line no="52">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateRequired</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="53">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="54">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">''</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="55">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'This field is required.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="56"/>
      <line no="57">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="58">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="59"/>
      <line no="60">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="61">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="62"/>
      <line no="63">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateString</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="64">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="65">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="66">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'This field must be a string.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="67"/>
      <line no="68">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="69">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="70"/>
      <line no="71">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="72">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="73"/>
      <line no="74">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateInteger</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="75">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="76">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_int</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="77">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'This field must be an integer.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="78"/>
      <line no="79">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="80">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="81"/>
      <line no="82">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="83">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="84"/>
      <line no="85">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateFloat</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="86">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="87">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_float</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="88">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'This field must be a float.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="89"/>
      <line no="90">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="91">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="92"/>
      <line no="93">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="94">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="95"/>
      <line no="96">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateNumeric</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="97">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="98">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_numeric</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="99">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'This field must be numeric.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="100"/>
      <line no="101">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="102">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="103"/>
      <line no="104">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="105">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="106"/>
      <line no="107">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateBoolean</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="108">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="109">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_bool</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="110">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'This field must be a boolean.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="111"/>
      <line no="112">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="113">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="114"/>
      <line no="115">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="116">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="117"/>
      <line no="118">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateArray</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="119">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="120">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="121">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'This field must be an array.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="122"/>
      <line no="123">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="124">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="125"/>
      <line no="126">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="127">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="128"/>
      <line no="129">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateEmail</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="130">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="131">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="132">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Email must be a string.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="133"/>
      <line no="134">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="135">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="136"/>
      <line no="137">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">filter_var</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">FILTER_VALIDATE_EMAIL</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="138">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Invalid email address.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="139"/>
      <line no="140">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="141">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="142"/>
      <line no="143">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="144">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="145"/>
      <line no="146">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateUrl</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="147">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="148">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="149">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'URL must be a string.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="150"/>
      <line no="151">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="152">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="153"/>
      <line no="154">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">filter_var</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">FILTER_VALIDATE_URL</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="155">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Invalid URL.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="156"/>
      <line no="157">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="158">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="159"/>
      <line no="160">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="161">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="162"/>
      <line no="163">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateMinLength</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="164">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="165">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="166">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Value must be a string.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="167"/>
      <line no="168">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="169">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="170"/>
      <line no="171">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$length</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="172"/>
      <line no="173">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$length</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="174">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="175">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="176">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Must be at least %d characters long, got %d.'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$length</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="177">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="178"/>
      <line no="179">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="180">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="181"/>
      <line no="182">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="183">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="184"/>
      <line no="185">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateMaxLength</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="186">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="187">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="188">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Value must be a string.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="189"/>
      <line no="190">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="191">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="192"/>
      <line no="193">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$length</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mb_strlen</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="194"/>
      <line no="195">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$length</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="196">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="197">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="198">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Must be at most %d characters long, got %d.'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$length</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="199">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="200"/>
      <line no="201">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="202">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="203"/>
      <line no="204">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="205">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="206"/>
      <line no="207">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateLength</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="208">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="209">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">validateMinLength</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="210">
        <token name="T_WHITESPACE">            </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">validateMaxLength</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="211">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="212"/>
      <line no="213">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateMin</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_PIPE">|</token>
        <token name="T_STRING">float</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="214">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="215">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_numeric</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="216">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Value must be numeric.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="217"/>
      <line no="218">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="219">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="220"/>
      <line no="221">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="222">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="223">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="224">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Must be at least %s, got %s.'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="225">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="226"/>
      <line no="227">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="228">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="229"/>
      <line no="230">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="231">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="232"/>
      <line no="233">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateMax</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_PIPE">|</token>
        <token name="T_STRING">float</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="234">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="235">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_numeric</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="236">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Value must be numeric.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="237"/>
      <line no="238">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="239">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="240"/>
      <line no="241">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="242">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="243">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="244">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Must be at most %s, got %s.'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="245">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="246"/>
      <line no="247">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="248">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="249"/>
      <line no="250">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="251">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="252"/>
      <line no="253">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateRange</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_PIPE">|</token>
        <token name="T_STRING">float</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_PIPE">|</token>
        <token name="T_STRING">float</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="254">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="255">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">validateMin</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="256">
        <token name="T_WHITESPACE">            </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">validateMax</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="257">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="258"/>
      <line no="259">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validatePattern</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$pattern</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="260">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="261">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="262">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Value must be a string.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="263"/>
      <line no="264">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="265">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="266"/>
      <line no="267">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">preg_match</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$pattern</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="268">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Does not match the required pattern.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="269"/>
      <line no="270">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="271">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="272"/>
      <line no="273">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="274">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="275"/>
      <line no="276">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateAlpha</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="277">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="278">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">validatePattern</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/^[a-zA-Z]+$/'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="279">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="280"/>
      <line no="281">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateAlphanumeric</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="282">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="283">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">validatePattern</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/^[a-zA-Z0-9]+$/'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="284">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="285"/>
      <line no="286">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateAlphaDash</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="287">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="288">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">validatePattern</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/^[a-zA-Z0-9_-]+$/'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="289">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="290"/>
      <line no="291">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="292">
        <token name="T_DOC_COMMENT">     * @param list&lt;mixed&gt; $allowedValues</token>
      </line>
      <line no="293">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="294">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateIn</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$allowedValues</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="295">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="296">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$allowedValues</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="297">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Invalid value.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="298"/>
      <line no="299">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="300">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="301"/>
      <line no="302">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="303">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="304"/>
      <line no="305">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="306">
        <token name="T_DOC_COMMENT">     * @param list&lt;mixed&gt; $disallowedValues</token>
      </line>
      <line no="307">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="308">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateNotIn</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$disallowedValues</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="309">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="310">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">in_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$disallowedValues</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="311">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'This value is not allowed.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="312"/>
      <line no="313">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="314">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="315"/>
      <line no="316">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="317">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="318"/>
      <line no="319">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateEquals</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$expected</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="320">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="321">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$expected</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="322">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Value does not match expected value.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="323"/>
      <line no="324">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="325">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="326"/>
      <line no="327">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="328">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="329"/>
      <line no="330">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateNotEquals</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$notExpected</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="331">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="332">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$notExpected</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="333">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Value must not equal the given value.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="334"/>
      <line no="335">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="336">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="337"/>
      <line no="338">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="339">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="340"/>
      <line no="341">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateContains</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$needle</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="342">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="343">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="344">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Value must be a string.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="345"/>
      <line no="346">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="347">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="348"/>
      <line no="349">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">str_contains</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$needle</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="350">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Value does not contain the required substring.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="351"/>
      <line no="352">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="353">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="354"/>
      <line no="355">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="356">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="357"/>
      <line no="358">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateStartsWith</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$prefix</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="359">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="360">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="361">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Value must be a string.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="362"/>
      <line no="363">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="364">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="365"/>
      <line no="366">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">str_starts_with</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$prefix</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="367">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Value does not start with the required prefix.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="368"/>
      <line no="369">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="370">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="371"/>
      <line no="372">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="373">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="374"/>
      <line no="375">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateEndsWith</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$suffix</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="376">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="377">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="378">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Value must be a string.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="379"/>
      <line no="380">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="381">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="382"/>
      <line no="383">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">str_ends_with</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$suffix</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="384">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Value does not end with the required suffix.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="385"/>
      <line no="386">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="387">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="388"/>
      <line no="389">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="390">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="391"/>
      <line no="392">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateArrayMinCount</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="393">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="394">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="395">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Value must be an array.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="396"/>
      <line no="397">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="398">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="399"/>
      <line no="400">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$count</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="401"/>
      <line no="402">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$count</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LT">&lt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="403">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="404">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="405">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Array must have at least %d items, got %d.'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$count</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="406">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="407"/>
      <line no="408">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="409">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="410"/>
      <line no="411">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="412">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="413"/>
      <line no="414">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateArrayMaxCount</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="415">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="416">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="417">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Value must be an array.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="418"/>
      <line no="419">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="420">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="421"/>
      <line no="422">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$count</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">count</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="423"/>
      <line no="424">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$count</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_GT">&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="425">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
      </line>
      <line no="426">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="427">
        <token name="T_WHITESPACE">                </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Array must have at most %d items, got %d.'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$count</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COMMA">,</token>
      </line>
      <line no="428">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="429"/>
      <line no="430">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="431">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="432"/>
      <line no="433">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="434">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="435"/>
      <line no="436">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateArrayCount</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">int</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="437">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="438">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">validateArrayMinCount</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$min</token>
        <token name="T_CLOSE_BRACKET">)</token>
      </line>
      <line no="439">
        <token name="T_WHITESPACE">            </token>
        <token name="T_BOOLEAN_AND">&amp;&amp;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">validateArrayMaxCount</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$max</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="440">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="441"/>
      <line no="442">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="443">
        <token name="T_DOC_COMMENT">     * @param list&lt;string&gt; $requiredKeys</token>
      </line>
      <line no="444">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="445">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateArrayHasKeys</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$requiredKeys</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="446">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="447">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_array</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="448">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Value must be an array.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="449"/>
      <line no="450">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="451">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="452"/>
      <line no="453">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$valid</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="454"/>
      <line no="455">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$requiredKeys</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$key</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="456">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">array_key_exists</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$key</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="457">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Missing required key: %s'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$key</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="458">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$valid</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="459">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="460">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="461"/>
      <line no="462">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$valid</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="463">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="464"/>
      <line no="465">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateDate</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$format</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Y-m-d'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="466">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="467">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="468">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Date must be a string.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="469"/>
      <line no="470">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="471">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="472"/>
      <line no="473">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$date</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\DateTime</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">createFromFormat</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$format</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="474"/>
      <line no="475">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$date</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$date</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">format</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$format</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="476">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Invalid date format, expected %s.'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$format</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="477"/>
      <line no="478">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="479">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="480"/>
      <line no="481">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="482">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="483"/>
      <line no="484">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateDateBefore</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$before</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="485">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="486">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="487">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Date must be a string.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="488"/>
      <line no="489">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="490">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="491"/>
      <line no="492">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$date</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\DateTime</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">createFromFormat</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Y-m-d'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="493">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$beforeDate</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\DateTime</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">createFromFormat</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Y-m-d'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$before</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="494"/>
      <line no="495">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$date</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$beforeDate</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="496">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Invalid date format.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="497"/>
      <line no="498">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="499">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="500"/>
      <line no="501">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$date</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_GREATER_OR_EQUAL">&gt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$beforeDate</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="502">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Date must be before %s.'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$before</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="503"/>
      <line no="504">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="505">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="506"/>
      <line no="507">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="508">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="509"/>
      <line no="510">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateDateAfter</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$after</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="511">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="512">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="513">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Date must be a string.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="514"/>
      <line no="515">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="516">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="517"/>
      <line no="518">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$date</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\DateTime</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">createFromFormat</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Y-m-d'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="519">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$afterDate</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_NAME_FULLY_QUALIFIED">\DateTime</token>
        <token name="T_DOUBLE_COLON">::</token>
        <token name="T_STRING">createFromFormat</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Y-m-d'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$after</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="520"/>
      <line no="521">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$date</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_BOOLEAN_OR">||</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$afterDate</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="522">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Invalid date format.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="523"/>
      <line no="524">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="525">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="526"/>
      <line no="527">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$date</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_SMALLER_OR_EQUAL">&lt;=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$afterDate</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="528">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">sprintf</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Date must be after %s.'</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$after</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="529"/>
      <line no="530">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="531">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="532"/>
      <line no="533">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="534">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="535"/>
      <line no="536">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateIpAddress</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="537">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="538">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="539">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'IP address must be a string.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="540"/>
      <line no="541">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="542">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="543"/>
      <line no="544">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">filter_var</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">FILTER_VALIDATE_IP</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="545">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Invalid IP address.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="546"/>
      <line no="547">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="548">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="549"/>
      <line no="550">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="551">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="552"/>
      <line no="553">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateIpv4</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="554">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="555">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="556">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'IP address must be a string.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="557"/>
      <line no="558">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="559">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="560"/>
      <line no="561">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">filter_var</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">FILTER_VALIDATE_IP</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">FILTER_FLAG_IPV4</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="562">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Invalid IPv4 address.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="563"/>
      <line no="564">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="565">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="566"/>
      <line no="567">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="568">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="569"/>
      <line no="570">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateIpv6</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="571">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="572">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="573">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'IP address must be a string.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="574"/>
      <line no="575">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="576">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="577"/>
      <line no="578">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">filter_var</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">FILTER_VALIDATE_IP</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">FILTER_FLAG_IPV6</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_IDENTICAL">===</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="579">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Invalid IPv6 address.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="580"/>
      <line no="581">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="582">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="583"/>
      <line no="584">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="585">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="586"/>
      <line no="587">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateJson</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="588">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="589">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="590">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'JSON must be a string.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="591"/>
      <line no="592">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="593">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="594"/>
      <line no="595">
        <token name="T_WHITESPACE">        </token>
        <token name="T_STRING">json_decode</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="596"/>
      <line no="597">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">json_last_error</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">JSON_ERROR_NONE</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="598">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Invalid JSON.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="599"/>
      <line no="600">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="601">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="602"/>
      <line no="603">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="604">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="605"/>
      <line no="606">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateUuid</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">string</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">mixed</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="607">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="608">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_STRING">is_string</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="609">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'UUID must be a string.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="610"/>
      <line no="611">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="612">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="613"/>
      <line no="614">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$pattern</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i'</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="615"/>
      <line no="616">
        <token name="T_WHITESPACE">        </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_STRING">preg_match</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$pattern</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_IS_NOT_IDENTICAL">!==</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_LNUMBER">1</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="617">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$this</token>
        <token name="T_OBJECT_OPERATOR">-&gt;</token>
        <token name="T_STRING">addError</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_CONSTANT_ENCAPSED_STRING">'Invalid UUID format.'</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="618"/>
      <line no="619">
        <token name="T_WHITESPACE">            </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="620">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="621"/>
      <line no="622">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="623">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="624"/>
      <line no="625">
        <token name="T_WHITESPACE">    </token>
        <token name="T_DOC_COMMENT">/**</token>
      </line>
      <line no="626">
        <token name="T_DOC_COMMENT">     * @param array&lt;string, mixed&gt; $data</token>
      </line>
      <line no="627">
        <token name="T_DOC_COMMENT">     * @param array&lt;string, callable&gt; $rules</token>
      </line>
      <line no="628">
        <token name="T_DOC_COMMENT">     */</token>
      </line>
      <line no="629">
        <token name="T_WHITESPACE">    </token>
        <token name="T_PUBLIC">public</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_FUNCTION">function</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">validateAll</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_COMMA">,</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_ARRAY">array</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$rules</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_COLON">:</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">bool</token>
      </line>
      <line no="630">
        <token name="T_WHITESPACE">    </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="631">
        <token name="T_WHITESPACE">        </token>
        <token name="T_VARIABLE">$valid</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">true</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="632"/>
      <line no="633">
        <token name="T_WHITESPACE">        </token>
        <token name="T_FOREACH">foreach</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$rules</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_AS">as</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_DOUBLE_ARROW">=&gt;</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$rule</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="634">
        <token name="T_WHITESPACE">            </token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$data</token>
        <token name="T_OPEN_SQUARE">[</token>
        <token name="T_VARIABLE">$field</token>
        <token name="T_CLOSE_SQUARE">]</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_COALESCE">??</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">null</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="635"/>
      <line no="636">
        <token name="T_WHITESPACE">            </token>
        <token name="T_IF">if</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_EXCLAMATION_MARK">!</token>
        <token name="T_VARIABLE">$rule</token>
        <token name="T_OPEN_BRACKET">(</token>
        <token name="T_VARIABLE">$value</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_CLOSE_BRACKET">)</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_OPEN_CURLY">{</token>
      </line>
      <line no="637">
        <token name="T_WHITESPACE">                </token>
        <token name="T_VARIABLE">$valid</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_EQUAL">=</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_STRING">false</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="638">
        <token name="T_WHITESPACE">            </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="639">
        <token name="T_WHITESPACE">        </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="640"/>
      <line no="641">
        <token name="T_WHITESPACE">        </token>
        <token name="T_RETURN">return</token>
        <token name="T_WHITESPACE"> </token>
        <token name="T_VARIABLE">$valid</token>
        <token name="T_SEMICOLON">;</token>
      </line>
      <line no="642">
        <token name="T_WHITESPACE">    </token>
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="643">
        <token name="T_CLOSE_CURLY">}</token>
      </line>
      <line no="644"/>
    </source>
  </file>
</phpunit>
