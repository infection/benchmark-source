<?php

declare(strict_types=1);

namespace Infection\BenchmarkSource\Test\AutoGenerated\DataTransformer;

use Infection\BenchmarkSource\AutoGenerated\DataTransformer\DataTransformer30;
use InvalidArgumentException;
use PHPUnit\Framework\Attributes\CoversClass;
use PHPUnit\Framework\Attributes\DataProvider;
use PHPUnit\Framework\TestCase;

#[CoversClass(DataTransformer30::class)]
final class DataTransformer30Test extends TestCase
{
    private DataTransformer30 $transformer;

    protected function setUp(): void
    {
        $this->transformer = new DataTransformer30();
    }

    #[DataProvider('filterProvider')]
    public function test_filters_array(array $input, callable $predicate, array $expected): void
    {
        $result = $this->transformer->filter($input, $predicate);

        self::assertSame($expected, $result);
    }

    public static function filterProvider(): iterable
    {
        yield [[1, 2, 3, 4, 5], fn ($x) => $x > 2, [3, 4, 5]];
        yield [[1, 2, 3, 4, 5], fn ($x) => $x % 2 === 0, [2, 4]];
        yield [[], fn ($x) => true, []];
        yield [[1, 2, 3], fn ($x) => false, []];
    }

    #[DataProvider('mapProvider')]
    public function test_maps_array(array $input, callable $callback, array $expected): void
    {
        $result = $this->transformer->map($input, $callback);

        self::assertSame($expected, $result);
    }

    public static function mapProvider(): iterable
    {
        yield [[1, 2, 3], fn ($x) => $x * 2, [2, 4, 6]];
        yield [[1, 2, 3], fn ($x) => $x + 1, [2, 3, 4]];
        yield [[], fn ($x) => $x * 2, []];
        yield [['a', 'b', 'c'], fn ($x) => strtoupper($x), ['A', 'B', 'C']];
    }

    #[DataProvider('reduceProvider')]
    public function test_reduces_array(array $input, callable $callback, mixed $initial, mixed $expected): void
    {
        $result = $this->transformer->reduce($input, $callback, $initial);

        self::assertSame($expected, $result);
    }

    public static function reduceProvider(): iterable
    {
        yield [[1, 2, 3, 4], fn ($carry, $item) => $carry + $item, 0, 10];
        yield [[1, 2, 3, 4], fn ($carry, $item) => $carry * $item, 1, 24];
        yield [[], fn ($carry, $item) => $carry + $item, 5, 5];
    }

    #[DataProvider('uniqueProvider')]
    public function test_removes_duplicates(array $input, array $expected): void
    {
        $result = $this->transformer->unique($input);

        self::assertSame($expected, $result);
    }

    public static function uniqueProvider(): iterable
    {
        yield [[1, 2, 2, 3, 3, 3], [1, 2, 3]];
        yield [['a', 'b', 'a', 'c'], ['a', 'b', 'c']];
        yield [[], []];
        yield [[1, 2, 3], [1, 2, 3]];
    }

    #[DataProvider('reverseProvider')]
    public function test_reverses_array(array $input, array $expected): void
    {
        $result = $this->transformer->reverse($input);

        self::assertSame($expected, $result);
    }

    public static function reverseProvider(): iterable
    {
        yield [[1, 2, 3], [3, 2, 1]];
        yield [['a', 'b', 'c'], ['c', 'b', 'a']];
        yield [[1], [1]];
        yield [[], []];
    }

    #[DataProvider('flattenProvider')]
    public function test_flattens_array(array $input, int $depth, array $expected): void
    {
        $result = $this->transformer->flatten($input, $depth);

        self::assertSame($expected, $result);
    }

    public static function flattenProvider(): iterable
    {
        yield [[[1, 2], [3, 4]], 1, [1, 2, 3, 4]];
        yield [[[[1, 2, 3]], [[4, 5, 6]]], 1, [[1, 2, 3], [4, 5, 6]]];
        yield [[[[1, 2, 3]], [[4, 5, 6]]], 2, [1, 2, 3, 4, 5, 6]];
    }

    public function test_flatten_rejects_invalid_depth(): void
    {
        $this->expectException(InvalidArgumentException::class);

        $this->transformer->flatten([[1, 2]], 0);
    }

    #[DataProvider('chunkProvider')]
    public function test_chunks_array(array $input, int $size, array $expected): void
    {
        $result = $this->transformer->chunk($input, $size);

        self::assertSame($expected, $result);
    }

    public static function chunkProvider(): iterable
    {
        yield [[1, 2, 3, 4, 5], 2, [[1, 2], [3, 4], [5]]];
        yield [[1, 2, 3], 1, [[1], [2], [3]]];
        yield [[1, 2, 3], 3, [[1, 2, 3]]];
        yield [[], 2, []];
    }

    public function test_chunk_rejects_invalid_size(): void
    {
        $this->expectException(InvalidArgumentException::class);

        $this->transformer->chunk([1, 2, 3], 0);
    }

    #[DataProvider('sliceProvider')]
    public function test_slices_array(array $input, int $offset, ?int $length, array $expected): void
    {
        $result = $this->transformer->slice($input, $offset, $length);

        self::assertSame($expected, $result);
    }

    public static function sliceProvider(): iterable
    {
        yield [[1, 2, 3, 4, 5], 1, 3, [2, 3, 4]];
        yield [[1, 2, 3, 4, 5], 2, null, [3, 4, 5]];
        yield [[1, 2, 3, 4, 5], 0, 2, [1, 2]];
        yield [[1, 2, 3], -2, null, [2, 3]];
    }

    #[DataProvider('mergeProvider')]
    public function test_merges_arrays(array $arrays, array $expected): void
    {
        $result = $this->transformer->merge(...$arrays);

        self::assertSame($expected, $result);
    }

    public static function mergeProvider(): iterable
    {
        yield [[[1, 2], [3, 4]], [1, 2, 3, 4]];
        yield [[[1], [2], [3]], [1, 2, 3]];
        yield [[[], [1, 2]], [1, 2]];
        yield [[['a' => 1], ['b' => 2]], ['a' => 1, 'b' => 2]];
    }

    #[DataProvider('diffProvider')]
    public function test_computes_diff(array $array1, array $array2, array $expected): void
    {
        $result = $this->transformer->diff($array1, $array2);

        self::assertSame($expected, $result);
    }

    public static function diffProvider(): iterable
    {
        yield [[1, 2, 3], [2, 3, 4], [1]];
        yield [[1, 2, 3], [4, 5, 6], [1, 2, 3]];
        yield [[1, 2, 3], [1, 2, 3], []];
    }

    #[DataProvider('intersectProvider')]
    public function test_computes_intersect(array $array1, array $array2, array $expected): void
    {
        $result = $this->transformer->intersect($array1, $array2);

        self::assertSame($expected, $result);
    }

    public static function intersectProvider(): iterable
    {
        yield [[1, 2, 3], [2, 3, 4], [2, 3]];
        yield [[1, 2, 3], [4, 5, 6], []];
        yield [[1, 2, 3], [1, 2, 3], [1, 2, 3]];
    }

    public function test_gets_keys(): void
    {
        $array = ['a' => 1, 'b' => 2, 'c' => 3];

        $result = $this->transformer->keys($array);

        self::assertSame(['a', 'b', 'c'], $result);
    }

    public function test_gets_values(): void
    {
        $array = ['a' => 1, 'b' => 2, 'c' => 3];

        $result = $this->transformer->values($array);

        self::assertSame([1, 2, 3], $result);
    }

    #[DataProvider('combineProvider')]
    public function test_combines_arrays(array $keys, array $values, array $expected): void
    {
        $result = $this->transformer->combine($keys, $values);

        self::assertSame($expected, $result);
    }

    public static function combineProvider(): iterable
    {
        yield [['a', 'b', 'c'], [1, 2, 3], ['a' => 1, 'b' => 2, 'c' => 3]];
        yield [[], [], []];
    }

    public function test_combine_rejects_mismatched_lengths(): void
    {
        $this->expectException(InvalidArgumentException::class);

        $this->transformer->combine(['a', 'b'], [1]);
    }

    public function test_flips_array(): void
    {
        $array = ['a' => 1, 'b' => 2];

        $result = $this->transformer->flip($array);

        self::assertSame([1 => 'a', 2 => 'b'], $result);
    }

    #[DataProvider('hasProvider')]
    public function test_checks_key_exists(array $array, string|int $key, bool $expected): void
    {
        $result = $this->transformer->has($array, $key);

        self::assertSame($expected, $result);
    }

    public static function hasProvider(): iterable
    {
        yield [['a' => 1, 'b' => 2], 'a', true];
        yield [['a' => 1, 'b' => 2], 'c', false];
        yield [[1, 2, 3], 0, true];
        yield [[1, 2, 3], 5, false];
    }

    #[DataProvider('containsProvider')]
    public function test_checks_value_exists(array $array, mixed $value, bool $expected): void
    {
        $result = $this->transformer->contains($array, $value);

        self::assertSame($expected, $result);
    }

    public static function containsProvider(): iterable
    {
        yield [[1, 2, 3], 2, true];
        yield [[1, 2, 3], 5, false];
        yield [['a', 'b', 'c'], 'b', true];
        yield [[], 1, false];
    }

    #[DataProvider('getProvider')]
    public function test_gets_value(array $array, string|int $key, mixed $default, mixed $expected): void
    {
        $result = $this->transformer->get($array, $key, $default);

        self::assertSame($expected, $result);
    }

    public static function getProvider(): iterable
    {
        yield [['a' => 1, 'b' => 2], 'a', null, 1];
        yield [['a' => 1, 'b' => 2], 'c', 'default', 'default'];
        yield [[1, 2, 3], 0, null, 1];
    }

    public function test_sets_value(): void
    {
        $array = ['a' => 1];

        $result = $this->transformer->set($array, 'b', 2);

        self::assertSame(['a' => 1, 'b' => 2], $result);
    }

    public function test_removes_value(): void
    {
        $array = ['a' => 1, 'b' => 2, 'c' => 3];

        $result = $this->transformer->remove($array, 'b');

        self::assertSame(['a' => 1, 'c' => 3], $result);
    }

    public function test_plucks_column(): void
    {
        $array = [
            ['id' => 1, 'name' => 'Alice'],
            ['id' => 2, 'name' => 'Bob'],
            ['id' => 3, 'name' => 'Charlie'],
        ];

        $result = $this->transformer->pluck($array, 'name');

        self::assertSame(['Alice', 'Bob', 'Charlie'], $result);
    }

    public function test_sorts_with_comparator(): void
    {
        $array = [3, 1, 4, 1, 5];

        $result = $this->transformer->sort($array, fn ($a, $b) => $a <=> $b);

        self::assertSame([1, 1, 3, 4, 5], $result);
    }

    public function test_sorts_ascending(): void
    {
        $array = [3, 1, 4, 1, 5];

        $result = $this->transformer->sortAscending($array);

        self::assertSame([1, 1, 3, 4, 5], $result);
    }

    public function test_sorts_descending(): void
    {
        $array = [3, 1, 4, 1, 5];

        $result = $this->transformer->sortDescending($array);

        self::assertSame([5, 4, 3, 1, 1], $result);
    }

    public function test_sorts_by_keys(): void
    {
        $array = ['c' => 3, 'a' => 1, 'b' => 2];

        $result = $this->transformer->sortByKeys($array);

        self::assertSame(['a' => 1, 'b' => 2, 'c' => 3], $result);
    }

    #[DataProvider('everyProvider')]
    public function test_checks_every(array $array, callable $predicate, bool $expected): void
    {
        $result = $this->transformer->every($array, $predicate);

        self::assertSame($expected, $result);
    }

    public static function everyProvider(): iterable
    {
        yield [[2, 4, 6], fn ($x) => $x % 2 === 0, true];
        yield [[2, 3, 4], fn ($x) => $x % 2 === 0, false];
        yield [[], fn ($x) => false, true];
    }

    #[DataProvider('someProvider')]
    public function test_checks_some(array $array, callable $predicate, bool $expected): void
    {
        $result = $this->transformer->some($array, $predicate);

        self::assertSame($expected, $result);
    }

    public static function someProvider(): iterable
    {
        yield [[1, 2, 3], fn ($x) => $x % 2 === 0, true];
        yield [[1, 3, 5], fn ($x) => $x % 2 === 0, false];
        yield [[], fn ($x) => true, false];
    }

    #[DataProvider('findProvider')]
    public function test_finds_item(array $array, callable $predicate, mixed $expected): void
    {
        $result = $this->transformer->find($array, $predicate);

        self::assertSame($expected, $result);
    }

    public static function findProvider(): iterable
    {
        yield [[1, 2, 3, 4], fn ($x) => $x > 2, 3];
        yield [[1, 2, 3, 4], fn ($x) => $x > 10, null];
        yield [[], fn ($x) => true, null];
    }

    #[DataProvider('findIndexProvider')]
    public function test_finds_index(array $array, callable $predicate, ?int $expected): void
    {
        $result = $this->transformer->findIndex($array, $predicate);

        self::assertSame($expected, $result);
    }

    public static function findIndexProvider(): iterable
    {
        yield [[1, 2, 3, 4], fn ($x) => $x > 2, 2];
        yield [[1, 2, 3, 4], fn ($x) => $x > 10, null];
        yield [[], fn ($x) => true, null];
    }

    public function test_groups_by(): void
    {
        $array = [
            ['type' => 'fruit', 'name' => 'apple'],
            ['type' => 'vegetable', 'name' => 'carrot'],
            ['type' => 'fruit', 'name' => 'banana'],
        ];

        $result = $this->transformer->groupBy($array, fn ($item) => $item['type']);

        self::assertCount(2, $result);
        self::assertCount(2, $result['fruit']);
        self::assertCount(1, $result['vegetable']);
    }

    public function test_partitions(): void
    {
        $array = [1, 2, 3, 4, 5, 6];

        [$even, $odd] = $this->transformer->partition($array, fn ($x) => $x % 2 === 0);

        self::assertSame([2, 4, 6], $even);
        self::assertSame([1, 3, 5], $odd);
    }

    #[DataProvider('firstProvider')]
    public function test_gets_first(array $array, mixed $expected): void
    {
        $result = $this->transformer->first($array);

        self::assertSame($expected, $result);
    }

    public static function firstProvider(): iterable
    {
        yield [[1, 2, 3], 1];
        yield [['a', 'b', 'c'], 'a'];
        yield [[], null];
    }

    #[DataProvider('lastProvider')]
    public function test_gets_last(array $array, mixed $expected): void
    {
        $result = $this->transformer->last($array);

        self::assertSame($expected, $result);
    }

    public static function lastProvider(): iterable
    {
        yield [[1, 2, 3], 3];
        yield [['a', 'b', 'c'], 'c'];
        yield [[], null];
    }

    #[DataProvider('takeProvider')]
    public function test_takes_items(array $array, int $count, array $expected): void
    {
        $result = $this->transformer->take($array, $count);

        self::assertSame($expected, $result);
    }

    public static function takeProvider(): iterable
    {
        yield [[1, 2, 3, 4, 5], 3, [1, 2, 3]];
        yield [[1, 2, 3], 5, [1, 2, 3]];
        yield [[1, 2, 3], 0, []];
    }

    public function test_take_rejects_negative_count(): void
    {
        $this->expectException(InvalidArgumentException::class);

        $this->transformer->take([1, 2, 3], -1);
    }

    #[DataProvider('skipProvider')]
    public function test_skips_items(array $array, int $count, array $expected): void
    {
        $result = $this->transformer->skip($array, $count);

        self::assertSame($expected, $result);
    }

    public static function skipProvider(): iterable
    {
        yield [[1, 2, 3, 4, 5], 2, [3, 4, 5]];
        yield [[1, 2, 3], 5, []];
        yield [[1, 2, 3], 0, [1, 2, 3]];
    }

    public function test_skip_rejects_negative_count(): void
    {
        $this->expectException(InvalidArgumentException::class);

        $this->transformer->skip([1, 2, 3], -1);
    }

    public function test_takes_while(): void
    {
        $array = [1, 2, 3, 4, 5];

        $result = $this->transformer->takeWhile($array, fn ($x) => $x < 4);

        self::assertSame([1, 2, 3], $result);
    }

    public function test_skips_while(): void
    {
        $array = [1, 2, 3, 4, 5];

        $result = $this->transformer->skipWhile($array, fn ($x) => $x < 4);

        self::assertSame([4, 5], $result);
    }

    public function test_diffs_keys(): void
    {
        $array1 = ['a' => 1, 'b' => 2, 'c' => 3];
        $array2 = ['b' => 2, 'd' => 4];

        $result = $this->transformer->diffKeys($array1, $array2);

        self::assertSame(['a' => 1, 'c' => 3], $result);
    }

    #[DataProvider('isEmptyProvider')]
    public function test_checks_is_empty(array $array, bool $expected): void
    {
        $result = $this->transformer->isEmpty($array);

        self::assertSame($expected, $result);
    }

    public static function isEmptyProvider(): iterable
    {
        yield [[], true];
        yield [[1], false];
        yield [[1, 2, 3], false];
    }

    #[DataProvider('isNotEmptyProvider')]
    public function test_checks_is_not_empty(array $array, bool $expected): void
    {
        $result = $this->transformer->isNotEmpty($array);

        self::assertSame($expected, $result);
    }

    public static function isNotEmptyProvider(): iterable
    {
        yield [[], false];
        yield [[1], true];
        yield [[1, 2, 3], true];
    }

    #[DataProvider('countProvider')]
    public function test_counts_items(array $array, int $expected): void
    {
        $result = $this->transformer->count($array);

        self::assertSame($expected, $result);
    }

    public static function countProvider(): iterable
    {
        yield [[], 0];
        yield [[1], 1];
        yield [[1, 2, 3], 3];
    }
}
