<?php

declare(strict_types=1);

namespace Infection\BenchmarkSource\Test\AutoGenerated\Finder;

use Infection\BenchmarkSource\AutoGenerated\Finder\ResourceFinder12;
use Infection\BenchmarkSource\CpuCoreFinder\ResourceFinder;
use PHPUnit\Framework\Attributes\CoversClass;
use PHPUnit\Framework\Attributes\DataProvider;
use PHPUnit\Framework\TestCase;
use function sprintf;

#[CoversClass(ResourceFinder12::class)]
final class ResourceFinder12Test extends TestCase
{
    public function test_can_be_instantiated(): void
    {
        new ResourceFinder12(10);

        $this->addToAssertionCount(1);
    }

    public function test_it_is_a_resource_finder(): void
    {
        $instance = new ResourceFinder12(10);

        self::assertInstanceOf(ResourceFinder::class, $instance);
    }

    /**
     * @param positive-int $value
     */
    #[DataProvider('diagnoseProvider')]
    public function test_it_can_be_diagnosed(
        int $value,
        string $expected,
    ): void
    {
        $finder = new ResourceFinder12($value);

        $actual = $finder->diagnose();

        self::assertSame($expected, $actual);
    }

    public static function diagnoseProvider(): iterable
    {
        for ($i = 1; $i < 50; $i++) {
            yield [
                $i,
                sprintf('Will return "%s".', $i),
            ];
        }
    }

    /**
     * @param positive-int $value
     */
    #[DataProvider('toStringProvider')]
    public function test_it_can_be_casted_into_a_string(
        int $value,
        string $expected,
    ): void
    {
        $finder = new ResourceFinder12($value);

        $actual = $finder->toString();

        self::assertSame($expected, $actual);
    }

    public static function toStringProvider(): iterable
    {
        for ($i = 1; $i < 50; $i++) {
            yield [
                $i,
                sprintf('ResourceFinder12(value=%s)', $i),
            ];
        }
    }
}

